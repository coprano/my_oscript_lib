
#Использовать ibcmdrunner

// BSLLS:LatinAndCyrillicSymbolInWord-off

#Область ОписаниеПеременных

Перем Лог; // Содержит объект лога
Перем ВременныйКаталогДанныхСервера; // Временный каталог данных автономного сервера
Перем МенеджерАС; // Вложенный объект упрапвления автономным сервером
Перем ПортHttpДоступа; // Основной сетевой порт, обслуживаемый сервером.

Перем ИспользоватьПрямоеСоединение; // Режим использования прямого соединения
Перем ПортПрямогоСоединения; // Основной сетевой порт установки прямого соединения с сервером

Перем ИспользоватьОтладку; // Режим использования отладки
Перем ПортОтладки; // Основной порт отладки

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет действие запуска платформы 1С через автономный сервер
//
// Параметры:
//   Действие - Действие - Метод выполняющий запуск платформы 1С.
//   ПараметрыКоманды - Соответствие - Параметры команды
//
//  Возвращаемое значение:
//   Число - Код возврата команды запуска.
//
Функция ВыполнитьДействие(Действие, ПараметрыКоманды) Экспорт

	ЗапуститьМенеджерАС();
	Лог.Информация("Запущен ibsrv на основном порту %1", ПортHttpДоступа);

	УстановитьДанныеПодключения(ПараметрыКоманды);
		
	Попытка
		Результат = Действие.Выполнить(ПараметрыКоманды);	
	Исключение
		МенеджерАС.Остановить();
		Лог.Информация("Процесс ibsrv остановлен");
		ВызватьИсключение;
	КонецПопытки;

	МенеджерАС.Остановить();
	Лог.Информация("Процесс ibsrv остановлен");

	Возврат Результат;

КонецФункции

// Включает режим прямого соединения с автономным сервером
//
Процедура ВключитьПрямоеСоединение() Экспорт
	ИспользоватьПрямоеСоединение = Истина;
КонецПроцедуры

// Включает режим отладки на автономном сервере
//
Процедура ВключитьОтладку() Экспорт
	ИспользоватьОтладку = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта(ПараметрыКоманды)
	
	Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	ВременныйКаталогДанныхСервера = ВременныеФайлы.СоздатьКаталог();
	
	МенеджерАС = Новый УправлениеАС();
	МенеджерАС.УстановитьКаталогДанных(ВременныйКаталогДанныхСервера);
	
	ПортHttpДоступа = ПортHttpДоступа();
	
	ИспользоватьПрямоеСоединение = Ложь;
	ПортПрямогоСоединения = ПортПрямогоСоединения();
	
	ИспользоватьОтладку = Ложь;
	ПортОтладки = ПортОтладки();

	ДанныеПодключения = ОбщиеМетоды.ДанныеПодключения(ПараметрыКоманды);

	ВерсияПлатформы = ДанныеПодключения.ВерсияПлатформы;
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Если ЗначениеЗаполнено(ДанныеПодключения.РазрядностьПлатформы) Тогда
			Разрядность = ОбщиеМетоды.РазрядностьПлатформы(ДанныеПодключения.РазрядностьПлатформы);
			Лог.Отладка("Разрядность платформы 1С указана %1", ДанныеПодключения.РазрядностьПлатформы);
		Иначе
			Разрядность = ОбщиеМетоды.РазрядностьПлатформы("x64x86");
			Лог.Отладка("Разрядность платформы 1С не указана, используем значение x64x86");
		КонецЕсли;

		МенеджерАС.УстановитьВерсиюПлатформы(ВерсияПлатформы, Разрядность);
	КонецЕсли;

	Лог.Информация("Используется ibsrv платформы %1", МенеджерАС.Версия());

	КаталогБазы = ОбщиеМетоды.КаталогФайловойИБ(ДанныеПодключения.ПутьБазы);
	МенеджерАС.УстановитьПараметрыФайловойИБ(КаталогБазы);

КонецПроцедуры

Процедура Деструктор() Экспорт

	Попытка
		ВременныеФайлы.УдалитьФайл(ВременныйКаталогДанныхСервера);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Лог.Отладка(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	ВременныйКаталогДанныхСервера = "";

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаПрямогоСоединения()
	Возврат СтрШаблон("/S localhost:%1/DefAlias", XMLСтрока(ПортПрямогоСоединения));
КонецФункции

Функция СтрокаВебСоединения()
	Возврат СтрШаблон("/WS http://localhost:%1/", XMLСтрока(ПортHttpДоступа));
КонецФункции

Процедура УстановитьДанныеПодключения(ПараметрыКоманды)

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	Если ИспользоватьПрямоеСоединение Тогда
		СтрокаСоединения = СтрокаПрямогоСоединения();
	Иначе
		СтрокаСоединения = СтрокаВебСоединения();
	КонецЕсли;

	НовыеДанныеПодключения = Новый Структура(ДанныеПодключения);
	НовыеДанныеПодключения.ПутьБазы = СтрокаСоединения;
	НовыеДанныеПодключения.СтрокаПодключения = СтрокаСоединения;
	Лог.Отладка("Установлена строка подключения к ИБ: %1", СтрокаСоединения);
	
	ПараметрыКоманды["ДанныеПодключения"] = НовыеДанныеПодключения;

КонецПроцедуры

Процедура ЗапуститьМенеджерАС()

	СдвигПортов = ДоступныйСдвигПортов();
	ПортHttpДоступа = ПортHttpДоступа(СдвигПортов);
	ПортПрямогоСоединения = ПортПрямогоСоединения(СдвигПортов);
	ПортОтладки = ПортОтладки(СдвигПортов);

	СформироватьФайлКонфигурацииАС(СдвигПортов);

	МенеджерАС.Запустить();

КонецПроцедуры

Функция ДоступныйСдвигПортов()

	ДиапазонПортов = 0; // Стандартный сдвиг
	КоличествоПопыток = 8;
	КоличествоДиапазонов = 32;

	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());

	Результат = Ложь;
	ТекущаяПопытка = 0;
	Пока Не Результат И ТекущаяПопытка < КоличествоПопыток Цикл
		
		СдвигПортов = СдвигПортовДляДиапазона(ДиапазонПортов);
		ПортПроверки = ПортHttpДоступа(СдвигПортов);
		Если ПортДоступен(ПортПроверки) Тогда
			Лог.Отладка("Порт %1 доступен для запуска ibsrv", ПортПроверки);
			Результат = Истина;
			Прервать;
		Иначе
			Лог.Отладка("Порт %1 недоступен для запуска ibsrv!", ПортПроверки);
		КонецЕсли;

		ТекущаяПопытка = ТекущаяПопытка + 1;
		ДиапазонПортов = Генератор.СлучайноеЧисло(1, КоличествоДиапазонов);
		
	КонецЦикла;

	Если Результат Тогда
		Возврат СдвигПортов;
	Иначе
		ВызватьИсключение "Не найден доступный порт для запуска автономного сервера!";
	КонецЕсли;

КонецФункции

Функция СдвигПортовДляДиапазона(ДиапазонПортов)
	Возврат 100 * ДиапазонПортов; // BSLLS:MagicNumber-off 
КонецФункции

Функция ПортПрямогоСоединения(СдвигПортов = 0)
	Возврат 8341 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция ПортHttpДоступа(СдвигПортов = 0)
	Возврат 8314 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция ПортОтладки(СдвигПортов = 0)
	Возврат 8350 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция МинимальныйПортПодключения(СдвигПортов = 0)
	Возврат 8360 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция МаксимальныйПортПодключения(СдвигПортов = 0)
	Возврат 8391 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция ПортДоступен(ПортПроверки)

	TCPСервер = Новый TCPСервер(ПортПроверки);
	Попытка
		TCPСервер.Запустить();	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	TCPСервер.Остановить();
	Возврат Истина;

КонецФункции

Процедура СформироватьФайлКонфигурацииАС(СдвигПортов) 

	СетевойИнтерфейс = "any";
	ИмяИБ = "DefAlias";
	РазрешитьВыдачуЛицензий = Истина;
	РазрешитьРегламентныеЗадания = Ложь;

	КонфигурационныйФайлАС = Новый КонфигурационныйФайлАС;
	КонфигурационныйФайлАС.ПараметрыСервера(СетевойИнтерфейс, ПортHttpДоступа);
	КонфигурационныйФайлАС.ПараметрыИБ(ИмяИБ, РазрешитьВыдачуЛицензий, РазрешитьРегламентныеЗадания);
	
	ИспользоватьШлюзПрямогоДоступа = ИспользоватьПрямоеСоединение;
	ИспользоватьШлюзHTTP = Неопределено;
	ИспользоватьШлюзSSH = Ложь;
	ИспользоватьРасширеннуюФункциональностьКонфигуратора = Неопределено;
	КонфигурационныйФайлАС.ПараметрыФункциональностиСервера(
		ИспользоватьШлюзПрямогоДоступа,	ИспользоватьШлюзHTTP, 
		ИспользоватьШлюзSSH, ИспользоватьРасширеннуюФункциональностьКонфигуратора);

	Если ИспользоватьПрямоеСоединение Тогда
		КонфигурационныйФайлАС.ПараметрыШлюзаПрямогоДоступа(ПортПрямогоСоединения, 
			МинимальныйПортПодключения(СдвигПортов), 
			МаксимальныйПортПодключения(СдвигПортов));
	КонецЕсли;

	Если ИспользоватьОтладку Тогда
		КонфигурационныйФайлАС.ПараметрыОтладкиСервера("http", ПортОтладки, СетевойИнтерфейс);
	КонецЕсли;

	ФайлКонфигурации = ОбъединитьПути(ВременныйКаталогДанныхСервера, "ibsrv.yaml");
	КонфигурационныйФайлАС.СоздатьКонфигурационныйФайл(ФайлКонфигурации);

	МенеджерАС.УстановитьКонфигурационныйФайл(ФайлКонфигурации);

КонецПроцедуры

#КонецОбласти
