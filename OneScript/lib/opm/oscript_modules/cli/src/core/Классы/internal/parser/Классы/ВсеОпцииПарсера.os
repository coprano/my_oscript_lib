#Использовать logos

Перем Опции Экспорт; // Массив - элементы ПараметрКоманды - Ссылка на класс опции
Перем ОпцииИндекс Экспорт; // Соответствие - Ссылка на текущий индекс опций

Перем Лог;

Процедура ПриСозданииОбъекта(ВходящиеОпции, Индекс)
	Опции = ВходящиеОпции;
	Лог.Отладка("Тип входящей опции: %1", ТипЗнч(ВходящиеОпции));
	
	ОпцииИндекс = Индекс;
КонецПроцедуры

// Выполняет поиск опций в массиве входящих аргументов
//
// Параметры:
//   ВходящиеАргументы - массив - входящие аргументы приложения
//   КонтекстПоиска - Объект - класс "КонтекстПарсера"
//
//  Возвращаемое значение:
//   Структура - структура описания токена
//    * РезультатПоиска - булево - признак успешного поиска
//    * Аргументы - Массив - массив оставшихся аргументов после поиска
//
Функция Поиск(Знач ВходящиеАргументы, КонтекстПоиска) Экспорт

	Аргументы = Новый Массив;

	Для каждого Арг Из ВходящиеАргументы Цикл
		Аргументы.Добавить(Арг);
	КонецЦикла;

	Результат = Новый Структура("РезультатПоиска, Аргументы", Ложь, Аргументы);

	РезультатПопыткиПоиска = ПопыткаПоиска(Аргументы, КонтекстПоиска);

	Если НЕ РезультатПопыткиПоиска.РезультатПоиска Тогда
		Возврат Результат;
	КонецЕсли;

	АргументыДляЦикла = РезультатПопыткиПоиска.Аргументы;
	
	Пока Истина Цикл

		РезультатПопыткиПоискаВЦикле = ПопыткаПоиска(АргументыДляЦикла, КонтекстПоиска);
		
		Если НЕ РезультатПопыткиПоискаВЦикле.РезультатПоиска Тогда
			Результат.РезультатПоиска = Истина;
			Результат.Аргументы = РезультатПопыткиПоискаВЦикле.Аргументы;
			Возврат Результат;
		КонецЕсли;
		
		АргументыДляЦикла = РезультатПопыткиПоискаВЦикле.Аргументы;

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПопыткаПоиска(Знач Аргументы, КонтекстПоиска)

	Результат = Новый Структура("РезультатПоиска, Аргументы", Ложь, Аргументы);
	
	Если Аргументы.Количество() = 0 
		ИЛИ КонтекстПоиска.СбросОпций Тогда
	
		Возврат Результат;

	КонецЕсли;

	Для каждого ОпцияПоиска Из Опции Цикл
		
		Если Не КонтекстПоиска.НеВключенныеОпции[ОпцияПоиска.Значение] = Неопределено Тогда
			Лог.Отладка("Исключен поиск опцию %1", ОпцияПоиска.Ключ.Имя);
			Продолжить;
		КонецЕсли;

		Лог.Отладка("Ищу опцию %1", ОпцияПоиска.Ключ.Имя);
		Лог.Отладка("Ищу опцию тип %1", ОпцияПоиска.Значение);
		
		КлассПоиска = Новый ОпцияПарсера(ОпцияПоиска.Значение, ОпцииИндекс);
		РезультатПоиска = КлассПоиска.Поиск(Аргументы, КонтекстПоиска);
		
		Лог.Отладка("Длина аргументов <%1> ", Аргументы.Количество());
		Лог.Отладка("Результат поиска опции %1 = <%2>", ОпцияПоиска.Ключ.Имя, РезультатПоиска.РезультатПоиска);
		Лог.Отладка("Длина аргументов после поиска <%1> ", РезультатПоиска.Аргументы.Количество());
		
		Если РезультатПоиска.РезультатПоиска Тогда
			
			Если ОпцияПоиска.Значение.УстановленаИзПеременнойОкружения Тогда
				
				КонтекстПоиска.НеВключенныеОпции.Вставить(ОпцияПоиска.Значение, Истина);
	
			КонецЕсли;
			
			Возврат Новый Структура("РезультатПоиска, Аргументы", Истина, РезультатПоиска.Аргументы);
		КонецЕсли;

	КонецЦикла;

	Возврат Новый Структура("РезультатПоиска, Аргументы", Ложь, Аргументы);

КонецФункции

// Возвращает приоритет текущего парсера
//
//  Возвращаемое значение:
//   число - приоритет текущего парсера
//
Функция Приоритет() Экспорт
	Возврат 2;
КонецФункции

// Возвращает имя текущего парсера
//
//  Возвращаемое значение:
//   строка - имя текущего парсера, на основании имени опции
//
Функция ВСтроку() Экспорт
	Представление = "-";
	ДлинаОпции = 2;

	Для каждого Опция Из Опции Цикл

		ИмяОпции = Опция.Ключ.Синонимы[0];
		Если СтрНачинаетсяС(ИмяОпции, "-") Тогда
			ИмяОпции = Сред(ИмяОпции, ДлинаОпции);
		КонецЕсли;
			
		Представление = Представление + ИмяОпции;
			
	КонецЦикла;

	Возврат Представление;
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.cli_class_options");