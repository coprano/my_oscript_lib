///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценария обработки файлов <СортировкаСостава>
//
///////////////////////////////////////////////////////////////////////////////

Перем ПрефиксыСортировки;          // перечень префиксов для сортировки объектов
Перем НесортируемыеТипыМетаданных; // перечень имен метаданных, пропускаемых при сортировке

// Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//  Строка - Имя текущего сценария обработки файлов
Функция ИмяСценария() Экспорт
	Возврат "СортировкаСостава";
КонецФункции

// Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//  Булево - Признак выполненной обработки файла
//
// BSLLS:UnusedParameters-off API
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
// BSLLS:UnusedParameters-on
	ФайлОбработан = Ложь;

	Если АнализируемыйФайл.Существует() Тогда

		НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
		ПараметрыСортировки = ПараметрыСортировки(АнализируемыйФайл, НастройкиСценария);
		Если НЕ (ПараметрыСортировки = Неопределено ИЛИ ПараметрыСортировки.Пустой()) Тогда

			ПолноеИмяФайла = АнализируемыйФайл.ПолноеИмя;
			ДополнительныеПараметры.Лог.Информация("Обработка файла '%1' по сценарию '%2'", ПолноеИмяФайла, ИмяСценария());

			ФайлОбработан = СортироватьСостав(ПолноеИмяФайла, ПараметрыСортировки);

			Если ФайлОбработан Тогда
				ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(ПолноеИмяФайла);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ФайлОбработан;

КонецФункции

#Область ПодготовкаСценариевОбработки

Функция ПараметрыСортировки(АнализируемыйФайл, НастройкиСценария)
	НастройкиСортировкиСостава = Новый НастройкиСортировкиСостава(АнализируемыйФайл);
	Если Не НастройкиСортировкиСостава.Пустой() Тогда
		ОтключенныеОбъекты = ОтключенныеОбъекты(НастройкиСценария);
		Если ОтключенныеОбъекты.Найти(НРег(НастройкиСортировкиСостава.Тип)) <> Неопределено Тогда
			// Пропускаем
			Возврат Неопределено;
		КонецЕсли;
	
		УстановитьУсловияОбработкиФайла(НастройкиСортировкиСостава);
		ПрефиксыСортировки = ПрефиксыСортировки(НастройкиСценария);
		НесортируемыеТипыМетаданных = НесортируемыеТипыМетаданных();
	КонецЕсли;

	Возврат НастройкиСортировкиСостава;
КонецФункции

Процедура УстановитьУсловияОбработкиФайла(НастройкиСортировки)
	Если НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.Конфигурация Тогда
		УстановитьУсловияОбработкиФайлаКонфигурация(НастройкиСортировки);
	ИначеЕсли НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.Подсистема Тогда
		УстановитьУсловияОбработкиФайлаПодсистема(НастройкиСортировки);
	ИначеЕсли НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.ФункциональнаяОпция Тогда
		УстановитьУсловияОбработкиФайлаФункциональнаяОпция(НастройкиСортировки);
	ИначеЕсли НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.ОпределяемыйТип Тогда
		УстановитьУсловияОбработкиФайлаОпределяемыйТип(НастройкиСортировки);
	ИначеЕсли НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.ПланОбмена Тогда
		УстановитьУсловияОбработкиФайлаПланОбмена(НастройкиСортировки);
	ИначеЕсли НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.ОбщийРеквизит Тогда
		УстановитьУсловияОбработкиФайлаОбщийРеквизит(НастройкиСортировки);
	ИначеЕсли НастройкиСортировки.Тип = ТипыОбъектовДляСортировки.ПодпискаНаСобытие Тогда
		УстановитьУсловияОбработкиФайлаПодпискаНаСобытие(НастройкиСортировки);
	Иначе
		ВызватьИсключение "Неизвестный тип для сортировки";
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаКонфигурация(НастройкиСортировки)
	НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("%1");
	Если НастройкиСортировки.ЕДТ() Тогда
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("  ");
	Иначе
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("			");
		НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("ChildObjects", "		");
	КонецЕсли;
	НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаПодсистема(НастройкиСортировки)
	Если НастройкиСортировки.ЕДТ() Тогда
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("content");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("  ");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	Иначе
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("xr:Item");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("				");
		НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("Content", "			");
		НастройкаСценарияСортировкиСостава.УстановитьЕстьАтрибуты();
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаФункциональнаяОпция(НастройкиСортировки)
	Если НастройкиСортировки.ЕДТ() Тогда
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("content");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("  ");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	Иначе
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("xr:Object");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("				");
		НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("Content", "			");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаОпределяемыйТип(НастройкиСортировки)
	Если НастройкиСортировки.ЕДТ() Тогда
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("types");
		Если НастройкиСортировки.Заимствованный() Тогда
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("      ");
			НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("typeExtension", "    ");
			НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("type");
		Иначе
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("    ");
		КонецЕсли;
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	Иначе
		Если НастройкиСортировки.Заимствованный() Тогда
			НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("v8:Type");
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("					");
			НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("xr:CheckValue xsi:type=""v8:TypeDescription""",
				"				", "xr:CheckValue");
			НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
			НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("v8:Type");
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("					");
			НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("xr:ExtendValue xsi:type=""v8:TypeDescription""",
				"				", "xr:ExtendValue");
			НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
		КонецЕсли;
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("v8:Type");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("				");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаОбщийРеквизит(НастройкиСортировки)
	Если НастройкиСортировки.ЕДТ() Тогда
		Если НастройкиСортировки.Заимствованный() Тогда
			НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("extension");
			НастройкаСценарияСортировкиСостава.УстановитьЕстьАтрибуты();
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("  ");
			НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("content");
			НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
		КонецЕсли;

		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("content");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("  ");
		НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("metadata");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	Иначе
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("xr:Item");
		НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("Content", "			");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("				");
		НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("xr:Metadata");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаПодпискаНаСобытие(НастройкиСортировки)
	Если НастройкиСортировки.ЕДТ() Тогда
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("types");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("    ");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	Иначе
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("v8:Type");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("				");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);

		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("v8:TypeSet");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("				");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУсловияОбработкиФайлаПланОбмена(НастройкиСортировки)
	Если НастройкиСортировки.ЕДТ() Тогда
		Если НастройкиСортировки.Заимствованный() Тогда
			НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("extendedConfigurationObject");
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("    ");
			НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент(
				"extension xsi:type=""mdclassExtension:ExchangePlanExtension""", "  ", "extension");
			НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
		КонецЕсли;
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("content");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("  ");
		НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("mdObject");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	Иначе
		Если НастройкиСортировки.Заимствованный() Тогда
			НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("Item");
			НастройкаСценарияСортировкиСостава.УстановитьРодительскийЭлемент("ExtensionProperty", "	");
			НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("		");
			НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("Metadata");
			НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
		КонецЕсли;
			
		НастройкаСценарияСортировкиСостава = Новый НастройкаСценарияСортировкиСостава("Item");
		НастройкаСценарияСортировкиСостава.УстановитьРазделительЭлементов("	");
		НастройкаСценарияСортировкиСостава.УстановитьИмяВложенного("Metadata");
		НастройкиСортировки.ДобавитьСценарий(НастройкаСценарияСортировкиСостава);
	КонецЕсли;
КонецПроцедуры

Функция ОтключенныеОбъекты(НастройкиСценария)
	Возврат НормализованныйМассивИзНастроек(НастройкиСценария, "ОтключенныеОбъекты", Истина, Истина);
КонецФункции

Функция ПрефиксыСортировки(НастройкиСценария)
	Возврат НормализованныйМассивИзНастроек(НастройкиСценария, "УчитываяПрефикс", Истина, Ложь);
КонецФункции

Функция НормализованныйМассивИзНастроек(НастройкиСценария, ИмяНастройки, СократитьПробелы, ВНижнийРегистр)

	Результат = Новый Массив();

	ЗначениеНастройки = НастройкиСценария.Получить(ИмяНастройки);
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если ТипЗнч(ЗначениеНастройки) <> Тип("Массив") Тогда
			ЗначениеНастройки = СтрРазделить(Строка(ЗначениеНастройки), ",", Ложь);
		КонецЕсли;

		Для Каждого Элемент Из ЗначениеНастройки Цикл
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				Продолжить;
			КонецЕсли;

			Если СократитьПробелы Тогда
				Элемент = СокрЛП(Элемент);
			КонецЕсли;

			Если ВНижнийРегистр Тогда
				Элемент = НРег(Элемент);
			КонецЕсли;

			Результат.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НесортируемыеТипыМетаданных()
	Результат = Новый Массив();
	Результат.Добавить("subsystems");
	Результат.Добавить("subsystem");
	Результат.Добавить("languages");
	Результат.Добавить("language");
	Возврат Результат;
КонецФункции

#КонецОбласти
#Область СортировкаСостава

Функция СортироватьСостав(ПолноеИмяФайла, ПараметрыСортировки)
	ФайлИзменился = Ложь;
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПолноеИмяФайла);

	Замены = Новый Массив;
	Для Каждого Сценарий Из ПараметрыСортировки.Сценарии() Цикл
		ПоискСостава = Сценарий.ШаблонПоискаСостава();
		СовпаденияСостава = ПоискСостава.НайтиСовпадения(СодержимоеФайла);
		Если СовпаденияСостава.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		СовпадениеСостава = СовпаденияСостава[0];
		СортированныйСостав = СортироватьСоставПоСценарию(СовпадениеСостава, ПараметрыСортировки, Сценарий) + Символы.ПС;
		СодержимоеФайла = ПоискСостава.Заменить(СодержимоеФайла, "_____ЗАМЕНА____" + Замены.Количество());
		Замены.Добавить(СортированныйСостав);
	КонецЦикла;
	НовыйТекст = СодержимоеФайла;
	Для Ит = 0 По Замены.Количество() - 1 Цикл
		НовыйТекст = СтрЗаменить(НовыйТекст, "_____ЗАМЕНА____" + Ит, Замены.Получить(Ит));
	КонецЦикла;
	НовыйТекст = СтрЗаменить(НовыйТекст, Символы.ПС + Символы.ПС, Символы.ПС);

	Если СтрСравнить(НовыйТекст, СодержимоеФайла) <> 0 Тогда
		СодержимоеФайла = НовыйТекст;
		ФайловыеОперации.ЗаписатьТекстФайла(ПолноеИмяФайла, СодержимоеФайла);
		ФайлИзменился = Истина;
	КонецЕсли;
	
	Возврат ФайлИзменился;
КонецФункции

Функция СортироватьСоставПоСценарию(СовпадениеСостава, ПараметрыСортировки, Сценарий)

	Результат = "";
	СоставОбъектов = СовпадениеСостава.Группы[1].Значение;

	Если ПараметрыСортировки.Тип = ТипыОбъектовДляСортировки.Конфигурация Тогда

		СортированныеОбъекты = Новый Массив;
		Для Каждого ТипМетаданных Из ИменаВсехЭлементовПоПорядку(СоставОбъектов) Цикл

			СоставТипа = ВырезатьЭлемент(СоставОбъектов, ТипМетаданных, Сценарий.РазделительЭлементов());
			Если НесортируемыеТипыМетаданных.Найти(НРег(ТипМетаданных)) = Неопределено Тогда
				ШаблонПоискаЭлементов = СтрШаблон(Сценарий.ШаблонПоискаЭлементов(), ТипМетаданных);

				СоставТипа = СортированныеЭлементы(СоставТипа, ШаблонПоискаЭлементов, Сценарий.РазделительЭлементов());
			КонецЕсли;

			СортированныеОбъекты.Добавить(СоставТипа);
		КонецЦикла;

		Результат = СтрСоединить(СортированныеОбъекты)
			+ ?(ПараметрыСортировки.ЕДТ(), Символы.ПС + СовпадениеСостава.Группы[2].Значение, ""); // Завершающий блок ЕДТ

	Иначе
		Результат = СортированныеЭлементы(СоставОбъектов, Сценарий.ШаблонПоискаЭлементов(), Сценарий.РазделительЭлементов());
	КонецЕсли;

	Если Сценарий.ЕстьРодительскийЭлемент() Тогда
		РодительскийЭлемент = Сценарий.РодительскийЭлемент();
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрШаблон(
				"
				|%1<%2>%4
				|%1</%3>",
				РодительскийЭлемент.Отступ,
				РодительскийЭлемент.Имя,
				РодительскийЭлемент.Завершение,
				Результат);
		Иначе
			Результат = СтрШаблон(
				"
				|%1<%2/>",
				РодительскийЭлемент.Отступ,
				РодительскийЭлемент.Имя);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ИменаВсехЭлементовПоПорядку(ТекстХМЛ)
	ПоискЭлементов = РегулярныеВыражения.Создать("<(?<name>[^>]+)[^>]*>[\w\W]*?<\/\k<name>>"); // стиль .NET

	Элементы = Новый ТаблицаЗначений;
	Элементы.Колонки.Добавить("ИмяЭлемента");
	Для Каждого СовпадениеЭлемента Из ПоискЭлементов.НайтиСовпадения(ТекстХМЛ) Цикл
		Элементы.Добавить().ИмяЭлемента = СовпадениеЭлемента.Группы.ПоИмени("name").Значение;
	КонецЦикла;
	Элементы.Свернуть("ИмяЭлемента");

	Возврат Элементы.ВыгрузитьКолонку("ИмяЭлемента");
КонецФункции

Функция ВырезатьЭлемент(ТекстХМЛ, ИмяЭлемента, РазделительЭлементов = "")
	Результат = "";
	
	ПоискЭлемента = РегулярныеВыражения.Создать(СтрШаблон("\s*(<%1[^>]*>[\w\W]*?<\/%1>)[ \t]*", ИмяЭлемента));
	СовпаденияЭлемента = ПоискЭлемента.НайтиСовпадения(ТекстХМЛ);
	Если СовпаденияЭлемента.Количество() > 0 Тогда

		СтрокиЭлемента = Новый Массив;
		Для Каждого СовпадениеЭлемента Из СовпаденияЭлемента Цикл
			СтрокиЭлемента.Добавить(СовпадениеЭлемента.Группы[1].Значение);
		КонецЦикла;

		Результат = РазделительЭлементов + СтрСоединить(СтрокиЭлемента, РазделительЭлементов);
		ТекстХМЛ = ПоискЭлемента.Заменить(ТекстХМЛ, "");

	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СортированныеЭлементы(Знач СтрокаСостава, ШаблонПоискаЭлементов, РазделительЭлементов) Экспорт
	ТаблицыПоПрефиксам  = ТаблицыПоПрефиксам();
	ПоискЭлементов = РегулярныеВыражения.Создать(ШаблонПоискаЭлементов);
	Для Каждого СовпадениеЭлемента Из ПоискЭлементов.НайтиСовпадения(СтрокаСостава) Цикл
		ЗначениеЭлемента = СовпадениеЭлемента.Группы[1].Значение;
		СтрокаСостава = СтрЗаменить(СтрокаСостава, СовпадениеЭлемента.Группы[0].Значение, "");
		Если СтрНайти(ЗначениеЭлемента, "-") > 0 Тогда // Вероятно это UID (битая ссылка)
			Продолжить;
		КонецЕсли;

		ИмяОбъекта = ИмяОбъекта(ЗначениеЭлемента);
		СтрокаЭлемента = СовпадениеЭлемента.Группы[0].Значение;
		ИндексТаблицы = ИндексТаблицыПоПрефиксу(ИмяОбъекта);
		СтрокаТаблицы = ТаблицыПоПрефиксам[ИндексТаблицы].Добавить();
		СтрокаТаблицы.СтрокаЭлемента = СтрокаЭлемента;
		СтрокаТаблицы.СтрокаСортировки = ЗначениеЭлемента;
	КонецЦикла;

	СортированныеЭлементыПоПрефиксами = Новый Массив();
	Для Каждого ТаблицаПрефикса Из ТаблицыПоПрефиксам Цикл
		Если ТаблицаПрефикса.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаПрефикса.Сортировать("СтрокаСортировки");
		ТаблицаПрефикса.Свернуть("СтрокаЭлемента");
		ОбработанныйБлок = СтрСоединить(ТаблицаПрефикса.ВыгрузитьКолонку("СтрокаЭлемента"), РазделительЭлементов);
		СортированныеЭлементыПоПрефиксами.Добавить(ОбработанныйБлок);
	КонецЦикла;

	Результат = СтрСоединить(СортированныеЭлементыПоПрефиксами, РазделительЭлементов);
	Если НЕ ПустаяСтрока(СтрокаСостава) Тогда
		ОчиститьОстатокБлокаОтПустыхСтрок(СтрокаСостава);
		Результат = Результат + Символы.ПС + СтрокаСостава;
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = РазделительЭлементов + Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ОчиститьОстатокБлокаОтПустыхСтрок(СтрокаСостава)
	Строки = СтрРазделить(СтрокаСостава, Символы.ПС, Ложь);
	СтрокиНовые = Новый Массив;
	Для Каждого Строка Из Строки Цикл
		Если НЕ ПустаяСтрока(Строка) Тогда
			СтрокиНовые.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	СтрокаСостава = СтрСоединить(СтрокиНовые, Символы.ПС);
КонецПроцедуры

Функция ТаблицыПоПрефиксам()

	КоличествоЭлементов = ?(ЗначениеЗаполнено(ПрефиксыСортировки), ПрефиксыСортировки.Количество() + 1, 1);
	ТаблицыПоПрефиксам = Новый Массив(КоличествоЭлементов);
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("СтрокаЭлемента");
	ТаблицаСортировки.Колонки.Добавить("СтрокаСортировки");
	
	Для Индекс = 0 По ТаблицыПоПрефиксам.ВГраница() Цикл
		ТаблицыПоПрефиксам[Индекс] = ТаблицаСортировки.СкопироватьКолонки();
	КонецЦикла;

	Возврат ТаблицыПоПрефиксам;

КонецФункции

Функция ИмяОбъекта(ЗначениеЭлемента)

	ИмяОбъекта = ЗначениеЭлемента;
	
	ПозицияТочки = СтрНайти(ИмяОбъекта, ".");
	Если ПозицияТочки > 0 Тогда
		ИмяОбъекта = Сред(ИмяОбъекта, ПозицияТочки + 1);
	КонецЕсли;

	Возврат ИмяОбъекта;

КонецФункции

Функция ИндексТаблицыПоПрефиксу(ИмяОбъекта)

	ИндексТаблицы = 0;

	Для НомерПрефикса = 1 По ПрефиксыСортировки.Количество() Цикл
		Если СтрНачинаетсяС(ИмяОбъекта, ПрефиксыСортировки[НомерПрефикса - 1]) Тогда
			ИндексТаблицы = НомерПрефикса;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ИндексТаблицы;

КонецФункции

#КонецОбласти
