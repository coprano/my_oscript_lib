<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>БуферДвоичныхДанных</title>
</head>
<body>
    <h1>БуферДвоичныхДанных / BinaryDataBuffer</h1>
<p>Коллекция байтов фиксированного размера с возможностью произвольного доступа и изменения по месту.
Размер буфера формально не ограничен, но поскольку все данные буфера полностью находятся в оперативной памяти, при попытке создать буфер слишком большого размера доступной памяти может оказаться недостаточно, в результате чего будет вызвано исключение. Поэтому при работе с буферами двоичных данных необходимо соотносить их размер с доступным объемом оперативной памяти.
При создании буфера можно указать порядок байтов, который будет использован для операций с целыми числами. При этом если буфер не создан явно, а получен с помощью вызова метода другого объекта, то порядок байтов в полученном буфере будет унаследован от порядка байтов, заданного для того объекта, метод которого вызывается.
Например, если буфер получен с помощью вызова метода ПрочитатьВБуферДвоичныхДанных, то порядок байтов в полученном буфере будет равен значению свойства ПорядокБайтов.
Возможен также более сложный случай наследования порядка байтов. Если буфер получен с помощью вызова метода ПолучитьБуферДвоичныхДанных, то порядок байтов у полученного буфера будет выбираться из объекта ЧтениеДанных, из которого был получен объект РезультатЧтенияДанных.
Порядок байтов, заданный для объекта ЧтениеДанных, будет использован во всех объектах, полученных на его основании.</p>
<h2>Свойства</h2>
<h3>ПорядокБайтов / ByteOrder</h3>
<p>Доступ: Чтение/Запись</p>
<p>Тип значения: ПорядокБайтов (ByteOrder)</p>
<p>Текущий порядок байтов. Влияет на операции чтения и записи целых чисел в буфер.</p>
<h3>Размер / Size</h3>
<p>Доступ: Чтение</p>
<p>Тип значения: Число (Number)</p>
<p>Размер буфера в байтах.</p>
<h3>ТолькоЧтение / ReadOnly</h3>
<p>Доступ: Чтение</p>
<p>Тип значения: Булево (Boolean)</p>
<p>Значение Истина указывает, что данный буфер предназначен только для чтения.</p>
<h2>Методы</h2>
<h3>Записать / Write()</h3>
<p>Заменить значения, начиная с заданной позиции, значениями из заданного буфера.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, начиная с которой требуется записать содержимое буфера.</p>
</li>
<li>
<p><em>bytes</em>: Байты, которыми нужно заполнить часть буфера.</p>
</li>
<li>
<p><em>number</em>: Количество байт, которые требуется заменить.</p>
</li>
</ul>
<h3>ЗаписатьЦелое16 / WriteInt16()</h3>
<p>Записать целое 16-битное положительное число в заданную позицию.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которой требуется записать число.</p>
</li>
<li>
<p><em>value</em>: Число, которое требуется записать.
Если значение не помещается в 16 бит, будет вызвано исключение.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h3>ЗаписатьЦелое32 / WriteInt32()</h3>
<p>Записать целое 32-битное положительное число в заданную позицию.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которой требуется записать число.</p>
</li>
<li>
<p><em>value</em>: Число, которое требуется записать.
Если значение не помещается в 32 бита, будет вызван исключение.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h3>ЗаписатьЦелое64 / WriteInt64()</h3>
<p>Записать целое 64-битное положительное число в заданную позицию.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которой требуется записать число.</p>
</li>
<li>
<p><em>value</em>: Число, которое требуется записать.
Если значение не помещается в 64 бита, будет вызвано исключение.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то используется порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h3>ЗаписатьПобитовоеИ / WriteBitwiseAnd()</h3>
<p>Объединить заданное количество байтов, начиная с указанной позиции с байтами из заданного буфера
с использованием побитового И.
Если количество байтов не указано, то объединяются все байты до конца буфера.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Начальная позиция в буфере.</p>
</li>
<li>
<p><em>bytes</em>: Буфер, с которым выполняется объединение.</p>
</li>
<li>
<p><em>number</em>: Количество байт, которые требуется объединить.</p>
</li>
</ul>
<h3>ЗаписатьПобитовоеИНе / WriteBitwiseAndNot()</h3>
<p>Объединить заданное количество байтов, начиная с указанной позиции с байтами из заданного буфера
с использованием побитового И НЕ.
Если количество байтов не указано, то объединяются все байты до конца буфера.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Начальная позиция в буфере.</p>
</li>
<li>
<p><em>bytes</em>: Буфер, с которым выполняется объединение.</p>
</li>
<li>
<p><em>number</em>: Количество байт, которые требуется объединить.</p>
</li>
</ul>
<h3>ЗаписатьПобитовоеИли / WriteBitwiseOr()</h3>
<p>Объединить заданное количество байтов, начиная с указанной позиции с байтами из заданного буфера
с использованием побитового ИЛИ.
Если количество байтов не указано, то объединяются все байты до конца буфера.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Начальная позиция в буфере.</p>
</li>
<li>
<p><em>bytes</em>: Буфер, с которым выполняется объединение.</p>
</li>
<li>
<p><em>number</em>: Количество байт, которые требуется объединить.</p>
</li>
</ul>
<h3>ЗаписатьПобитовоеИсключительноеИли / WriteBitwiseXor()</h3>
<p>Объединить заданное количество байтов, начиная с указанной позиции с байтами из заданного буфера
с использованием побитового ИСКЛЮЧИТЕЛЬНОГО ИЛИ (XOR).
Если количество байтов не указано, то объединяются все байты до конца буфера.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Начальная позиция в буфере.</p>
</li>
<li>
<p><em>bytes</em>: Буфер, с которым выполняется объединение.</p>
</li>
<li>
<p><em>number</em>: Количество байт, которые требуется объединить.</p>
</li>
</ul>
<h3>Перевернуть / Reverse()</h3>
<p>Создает новый буфер, содержащий элементы текущего буфера в противоположном порядке.</p>
<h4>Возвращаемое значение</h4>
<h3>Получить / Get()</h3>
<p>Получает значение элемента на указанной позиции.</p>
<h4>Параметры</h4>
<ul>
<li><em>position</em>: Позиция элемента в буфере. Нумерация начинается с 0.</li>
</ul>
<h4>Возвращаемое значение</h4>
<p>Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</p>
<h3>ПолучитьСрез / GetSlice()</h3>
<p>Создает новый буфер, использующий заданное количество байтов из исходного буфера, начиная с заданной позиции (нумерация с 0). Если количество не задано, то новый буфер является представлением элементов текущего буфера, начиная с заданного индекса и до конца.</p>
<p>НЕ РЕАЛИЗОВАН</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, начиная с которой будет создан новый буфер.</p>
</li>
<li>
<p><em>number</em>: Количество байтов, которые требуется отобразить в срезе. Если на задано, то отображаются все байты от начала среза до конца исходного буфера.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h4>Возвращаемое значение</h4>
<h3>Прочитать / Read()</h3>
<p>Выполняет чтение байтов из буфера и помещает их в новый буфер.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, начиная с которой требуется прочитать байты.</p>
</li>
<li>
<p><em>number</em>: Количество байтов, которое требуется прочитать.</p>
</li>
</ul>
<h4>Возвращаемое значение</h4>
<h3>ПрочитатьЦелое16 / ReadInt16()</h3>
<p>Выполняет чтение целого 16-битного положительного числа на заданной позиции.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которой требуется прочитать число.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов, используемый при чтении числа.
Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h4>Возвращаемое значение</h4>
<h3>ПрочитатьЦелое32 / ReadInt32()</h3>
<p>Прочитать целое 32-битное положительное число на заданной позиции.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которой требуется прочитать число.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов, используемый при чтении числа.
Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h4>Возвращаемое значение</h4>
<p>Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</p>
<h3>ПрочитатьЦелое64 / ReadInt64()</h3>
<p>Выполняет чтение целого 64-битного положительного числа на заданной позиции.</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которой требуется прочитать число.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов, используемый при чтении числа.
Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
Значение по умолчанию: Неопределено.</p>
</li>
</ul>
<h4>Возвращаемое значение</h4>
<p>Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</p>
<h3>Разделить / Split()</h3>
<p>Разделить буфер на части по заданному разделителю или массиву разделителей.</p>
<h4>Параметры</h4>
<ul>
<li><em>separator</em>: Разделитель.</li>
</ul>
<h4>Возвращаемое значение</h4>
<p>Массив из буферов двоичных данных</p>
<h3>Скопировать / Copy()</h3>
<p>Создает копию массива.</p>
<h4>Возвращаемое значение</h4>
<h3>Соединить / Concat()</h3>
<p>Создает новый буфер, содержащий элементы текущего буфера и, за ними, элементы заданного буфера.</p>
<h4>Параметры</h4>
<ul>
<li><em>buffer</em>: Буфер, который будет соединен с исходным.</li>
</ul>
<h4>Возвращаемое значение</h4>
<h3>Установить / Set()</h3>
<p>Устанавливает значение элемента на заданной позиции (нумерация начинается с 0).</p>
<h4>Параметры</h4>
<ul>
<li>
<p><em>position</em>: Позиция, на которую требуется поместить новое значение.</p>
</li>
<li>
<p><em>value</em>: Значение, которое требуется установить в заданную позицию буфера.
Если значение больше 255 или меньше 0, будет выдана ошибка о неверном значении параметра.</p>
</li>
</ul>
<h3>УстановитьТолькоЧтение / SetReadOnly()</h3>
<p>Переводит текущий буфер в режим &quot;только для чтения&quot;.
Попытка изменить состояние буфера приведет к вызову исключения.</p>
<h2>Конструкторы</h2>
<h3>По умолчанию</h3>
<h4>Параметры</h4>
<ul>
<li>
<p><em>size</em>: Размер буфера в байтах.</p>
</li>
<li>
<p><em>byteOrder</em>: Порядок байтов.
Значение по умолчанию: LittleEndian.</p>
</li>
</ul>

</body>
</html>