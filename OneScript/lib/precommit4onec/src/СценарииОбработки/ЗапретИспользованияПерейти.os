///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов <ЗапретИспользованияПерейти>
//
///////////////////////////////////////////////////////////////////////////////

Перем Лог;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "ЗапретИспользованияПерейти";

КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	Если АнализируемыйФайл.Существует() И ТипыФайлов.ЭтоФайлИсходников(АнализируемыйФайл) Тогда
		
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		
		ПроверитьНаОтсутствиеПерейти(АнализируемыйФайл.ПолноеИмя);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ОбработатьФайл()

Процедура ПроверитьНаОтсутствиеПерейти(ПутьКФайлуМодуля)
	
	ТекстМодуля = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуМодуля);
	Если НЕ ПустаяСтрока(ТекстМодуля) Тогда
	
		ТекстОшибки = "";
		ШаблонПоиска = Новый РегулярноеВыражение("[\s;]+?[^|](Перейти\s+?~[a-zA-ZА-ЯЁа-яё0-9_]+)");
		ШаблонПоиска.Многострочный = Истина;
		ШаблонПоиска.ИгнорироватьРегистр = Истина;
		
		Совпадения = ШаблонПоиска.НайтиСовпадения(ТекстМодуля);
		Если Совпадения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Совпадение = Совпадения[0];
		Если Совпадение.Группы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		БлокПерейти = Совпадение.Группы[1].Значение;
		ПозицияБлока = СтрНайти(Совпадение.Значение, БлокПерейти);

		КавычкиОткрыты = Ложь;
		ПозицияКавычек = 0;
		Пока ПозицияКавычек < ПозицияБлока Цикл
			ПозицияКавычек = СтрНайти(Совпадение.Значение, """", НаправлениеПоиска.СНачала, ПозицияКавычек + 1);
			Если ПозицияКавычек = 0 ИЛИ ПозицияКавычек > ПозицияБлока Тогда
				Прервать;
			КонецЕсли;

			КавычкиОткрыты = НЕ КавычкиОткрыты;
		КонецЦикла;

		Если КавычкиОткрыты Тогда
			// Блок Перейти находится внутри строкового значения и не является выражением языка.
			Возврат;
		КонецЕсли;

		ТекстОшибки = СтрШаблон(
			"В файле '%1' обнаружено использование Перейти (%2)",
			ПутьКФайлуМодуля,
			Совпадения.Количество());
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;

	КонецЕсли;

КонецПроцедуры
