///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией сценариев обработки файлов <СинхронизацияОбъектовМетаданныхИФайлов>
//
///////////////////////////////////////////////////////////////////////////////

// Формат анализируемого файла конфигурации
Перем ЭтоEDT;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "СинхронизацияОбъектовМетаданныхИФайлов";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	ЭтоEDT = ТипыФайлов.ЭтоФайлОписанияКонфигурацииEDT(АнализируемыйФайл);
	ЭтоФайлОписанияКонфигурации = ЭтоEDT ИЛИ ТипыФайлов.ЭтоФайлОписанияКонфигурации(АнализируемыйФайл);
	
	Если АнализируемыйФайл.Существует() И ЭтоФайлОписанияКонфигурации Тогда
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		Если СинхронизироватьМетаданныеИФайлы(АнализируемыйФайл.ПолноеИмя) Тогда
			ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(АнализируемыйФайл.ПолноеИмя);
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОбработатьФайл()

Функция СинхронизироватьМетаданныеИФайлы(Знач ИмяФайла)
	ОбъектыМетаданных = ПолучитьОбъектыМетаданных(ИмяФайла);
	Если ОбъектыМетаданных.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ТипыМетаданных = ОбъектыМетаданных.Скопировать();
	ТипыМетаданных.Свернуть("ТипМетаданных");

	МассивОшибок = Новый Массив;
	КаталогиТиповМетаданных = КаталогиТиповМетаданных(ИмяФайла, МассивОшибок);

	Для Каждого СтрокаТипа Из ТипыМетаданных Цикл
		КаталогТипа = КаталогиТиповМетаданных.Получить(СтрокаТипа.ТипМетаданных);
		Если КаталогТипа = Неопределено Тогда
			МассивОшибок.Добавить(СтрШаблон("Не найден каталог типа метаданных %1", СтрокаТипа.ТипМетаданных));
			Продолжить;
		КонецЕсли;

		МассивОбъектов = МассивОбъектовМетаданных(ОбъектыМетаданных, СтрокаТипа.ТипМетаданных);
		ФайлыОбъектов = НайтиФайлыОбъектов(КаталогТипа, МассивОбъектов, МассивОшибок);
		
		Для Каждого Файл Из ФайлыОбъектов Цикл
			// Для формата Конфигуратора объекты представлены файлом описания и каталогом с файлами модулей и форм.
			// При отсутствии данных модулей и форм каталог может отсутствовать.
			// В формате EDT файлы описания объекта лежат в каталоге с именем объекта.
			УдалитьЭлементМассива(МассивОбъектов, Файл);
		КонецЦикла;

		Для Каждого ОбъектМетаданных Из МассивОбъектов Цикл
			// В массиве остались объекты, по которым не найдены файл описания и каталог объекта
			Ошибка = СтрШаблон("Отсутствуют файлы для %1.%2", СтрокаТипа.ТипМетаданных, ОбъектМетаданных);
			МассивОшибок.Добавить(Ошибка);
		КонецЦикла;
	КонецЦикла;

	Если МассивОшибок.Количество() > 0 Тогда
		ЕдиныйТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		ВызватьИсключение ЕдиныйТекстОшибки;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Читает данные файла конфигурации и составляет список объектов метаданных
// Параметры:
//	ИмяФайла - Строка - Имя файла конфигурации
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат разбора файла конфигурации
//
Функция ПолучитьОбъектыМетаданных(ИмяФайла)
	ОбъектыМетаданных = НоваяТаблицаМетаданных();
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	ДочерниеЭлементы = РегулярныеВыражения.ПолучитьДочерниеЭлементыОписанияКонфигурации(СодержимоеФайла, ЭтоEDT);
	
	Если ДочерниеЭлементы.Количество = 0 Тогда
		Возврат ОбъектыМетаданных;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из ДочерниеЭлементы.Совпадения Цикл
		НоваяЗапись = ОбъектыМетаданных.Добавить();
		НоваяЗапись.ТипМетаданных = ОбъектМетаданных.Группы[1].Значение;
		НоваяЗапись.ИмяМетаданных = ОбъектМетаданных.Группы[2].Значение;
	КонецЦикла;
	
	ОбъектыМетаданных.Свернуть("ТипМетаданных, ИмяМетаданных", "");
	Возврат ОбъектыМетаданных;
КонецФункции

// Формирует список каталогов типов объектов метаданных. Если каталог не относится к метаданных, записывает ошибку.
// Параметры:
//	ИмяФайла - Строка - Имя файла конфигурации
//	МассивОшибок - Массив - массив строк ошибок
//
// Возвращаемое значение:
//	Соответствие - содержит пары из имени каталога и объекта файла
//
Функция КаталогиТиповМетаданных(ИмяФайла, МассивОшибок)
	КаталогиТипов = Новый Соответствие;
	ФайлКонфигурации = Новый Файл(ИмяФайла);
	СписокКаталогов = МетаданныеКонфигурации.КаталогиТиповМетаданных(ЭтоEDT);
	
	КорневойКаталог = Новый Файл(?(ЭтоEDT, ОбъединитьПути(ФайлКонфигурации.Путь, ".."), ФайлКонфигурации.Путь));
	ДобавитьСоответствиеКаталогов(КорневойКаталог, КаталогиТипов, СписокКаталогов, МассивОшибок);
	Если ЭтоEDT Тогда
		// Каталоги Интерфейсов и Стилей конфигурации, использующей обычные формы, могут попасть в отдельную папку "unknown".
		КаталогНеизвестныхОбъектов = Новый Файл(ФайловыеОперации.НормализоватьРазделители(ОбъединитьПути(КорневойКаталог.ПолноеИмя, "../unknown")));
		ДобавитьСоответствиеКаталогов(КаталогНеизвестныхОбъектов, КаталогиТипов, СписокКаталогов, МассивОшибок);
	КонецЕсли;

	Возврат КаталогиТипов;
КонецФункции

Процедура ДобавитьСоответствиеКаталогов(КаталогПоиска, КаталогиТипов, ТипыМетаданных, МассивОшибок)
	НеобрабатываемыеКаталоги = НеобрабатываемыеКаталоги();
	Каталоги = ФайловыеОперации.НайтиКаталоги(КаталогПоиска.ПолноеИмя);
	Для Каждого Каталог Из Каталоги Цикл
		Если НеобрабатываемыеКаталоги.НайтиПоЗначению(Каталог.ИмяБезРасширения) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Элемент = ТипыМетаданных.НайтиПоЗначению(Каталог.ИмяБезРасширения);
		Если Элемент = Неопределено Тогда
			Если НЕ ПустойКаталог(Каталог.ПолноеИмя) Тогда
				МассивОшибок.Добавить(СтрШаблон("Каталог не является каталогом метаданных %1", Каталог.ПолноеИмя));
			КонецЕсли;
		Иначе
			КаталогиТипов.Вставить(Элемент.Представление, Каталог);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НеобрабатываемыеКаталоги()
	НеобрабатываемыеКаталоги = Новый СписокЗначений;
	НеобрабатываемыеКаталоги.Добавить("Configuration");
	НеобрабатываемыеКаталоги.Добавить("Ext");

	Возврат НеобрабатываемыеКаталоги;
КонецФункции

Функция МассивОбъектовМетаданных(ОбъектыМетаданных, ТипМетаданных)
	МассивОбъектов = Новый Массив;
	НайденныеСтроки = ОбъектыМетаданных.НайтиСтроки(Новый Структура("ТипМетаданных", ТипМетаданных));
	Для Каждого Строка Из НайденныеСтроки Цикл
		МассивОбъектов.Добавить(Строка.ИмяМетаданных);
	КонецЦикла;

	Возврат МассивОбъектов;
КонецФункции

Функция НайтиКаталогиОбъектов(КаталогТипа, МассивОбъектов, МассивОшибок)
	КаталогиОбъектов = Новый Массив;
	НайденныеКаталоги = ФайловыеОперации.НайтиКаталоги(КаталогТипа.ПолноеИмя);
	Для Каждого Каталог Из НайденныеКаталоги Цикл
		Если МассивОбъектов.Найти(Каталог.ИмяБезРасширения) = Неопределено Тогда
			Если НЕ ПустойКаталог(Каталог.ПолноеИмя) Тогда
				МассивОшибок.Добавить(СтрШаблон("Каталог не является каталогом объекта %1", Каталог.ПолноеИмя));
			КонецЕсли;
		Иначе
			КаталогиОбъектов.Добавить(Каталог);
		КонецЕсли;
	КонецЦикла;

	Возврат КаталогиОбъектов;
КонецФункции

Функция НайтиФайлыОбъектов(КаталогТипа, МассивОбъектов, МассивОшибок)
	МассивФайлов = Новый Массив;

	// Файлы в формате Конфигуратора и файлы из каталога unknown EDT
	НайденныеФайлы = НайтиФайлы(КаталогТипа.ПолноеИмя, "*.xml", Ложь);
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если Файл.ЭтоФайл() Тогда
			Если МассивОбъектов.Найти(Файл.ИмяБезРасширения) = Неопределено Тогда
				МассивОшибок.Добавить(СтрШаблон("Файл не является файлом описания объекта %1", Файл.ПолноеИмя));
			Иначе
				МассивФайлов.Добавить(Файл.ИмяБезРасширения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Найдем все каталоги. Добавим ошибку для тех, что не относятся к объектам.
	КаталогиОбъектов = НайтиКаталогиОбъектов(КаталогТипа, МассивОбъектов, МассивОшибок);

	Если ЭтоEDT Тогда
		// Файлы в формате EDT
		Для Каждого Каталог Из КаталогиОбъектов Цикл
			Если МассивФайлов.Найти(Каталог.ИмяБезРасширения) <> Неопределено Тогда
				// Файл описания уже найден
				Продолжить;
			КонецЕсли;

			НайденныеФайлы = НайтиФайлы(Каталог.ПолноеИмя, СтрШаблон("%1.mdo", Каталог.ИмяБезРасширения), Ложь);
			Для Каждого Файл Из НайденныеФайлы Цикл
				Если Файл.ЭтоФайл() Тогда
					МассивФайлов.Добавить(Файл.ИмяБезРасширения);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат МассивФайлов;
КонецФункции

Функция НоваяТаблицаМетаданных()
	ОбъектыМетаданных = Новый ТаблицаЗначений;
	ОбъектыМетаданных.Колонки.Добавить("ТипМетаданных");
	ОбъектыМетаданных.Колонки.Добавить("ИмяМетаданных");

	Возврат ОбъектыМетаданных;
КонецФункции

Функция ПустойКаталог(Каталог)
	НайденныеФайлы = НайтиФайлы(Каталог, "*");
	Возврат НайденныеФайлы.Количество() = 0;
КонецФункции

Процедура УдалитьЭлементМассива(Массив, Элемент)
	Индекс = Массив.Найти(Элемент);
	Если Индекс <> Неопределено Тогда
		Массив.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры
