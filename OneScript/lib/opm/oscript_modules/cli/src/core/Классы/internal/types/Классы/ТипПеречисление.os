
Перем ПеречисленияКласса Экспорт; // Соответствие

Перем ОписаниеОшибкиКласса;

// Возвращает строковое представление значения типа
//
// Параметры:
//   Значение - Строка - значение типа
//
//  Возвращаемое значение:
//   строка - значение в строковом представлении
//
Функция ВСтроку(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Сценарий") Тогда
		Возврат Значение.ВСтроку();
	КонецЕсли;

	Возврат Строка(Значение);
	
КонецФункции

// Возвращает подробное описание перечислений значения типа
//
//  Возвращаемое значение:
//   строка - значение в строковом представлении
//
Функция ПодробноеОписание() Экспорт

	СтрокаОписания = "";

	Для каждого КлючЗначение Из ПеречисленияКласса Цикл
		
		СтрокаОписания = СтрокаОписания + СтрШаблон("%1: %2",
										КлючЗначение.Значение.Наименование,
										КлючЗначение.Значение.ДополнительнаяСправка) + Символы.ПС;

	КонецЦикла;

	Возврат СтрокаОписания;
	
КонецФункции

// Преобразует и устанавливает входящее значение к значению типа
//
// Параметры:
//   ВходящееЗначение - строка - строковое представление значения
//   Значение - произвольный - переменная для установки значения
//
//  Возвращаемое значение:
//   Произвольный - конвертированные значение
//
Функция УстановитьЗначение(Знач ВходящееЗначение, Значение) Экспорт

	ЗначениеПеречисления = ПеречисленияКласса[ВходящееЗначение];
	
	Если НЕ ЗначениеПеречисления = Неопределено Тогда
		Значение = ЗначениеПеречисления.Значение;
	Иначе
		ОписаниеОшибкиКласса = "Выбранное значение перечисления не соответствует доступным";
	КонецЕсли;

	Возврат Значение;

КонецФункции 

// Возвращает описание ошибки и устанавливает признак ошибки 
//
// Параметры:
//   ЕстьОшибка - булево - произвольная переменная
//
//  Возвращаемое значение:
//   Строка - описание текущей ошибки преобразования типов
//
Функция Ошибка(ЕстьОшибка = Ложь) Экспорт
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиКласса) Тогда
		ЕстьОшибка = Истина;
	КонецЕсли;

	Возврат ОписаниеОшибкиКласса;
	
КонецФункции

// Устанавливает доступные перечисления из соответствия
//
// Параметры:
//   СоответствиеПеречислений - Соответствие - Доступные перечисления
//							 * Ключ - Строка - доступные ключи ("Наименование, Значение, ДополнительнаяСправка")
//							 * Значение - произвольный 
//
Процедура УстановитьПеречисления(Знач СоответствиеПеречислений) Экспорт
	
	Если Тип("Соответствие") = ТипЗнч(СоответствиеПеречислений) Тогда
		ПеречисленияКласса = СоответствиеПеречислений;
	КонецЕсли;
		
КонецПроцедуры

// Добавляет перечисление в коллекцию
//
// Параметры:
//   ПользовательскоеЗначение - Строка - пользовательское представление значения
//   Значение - произвольный - системное значение перечисления
//   ДополнительнаяСправка - строка - дополнительное описание для справки
//
Процедура ДобавитьПеречисление(Знач ПользовательскоеЗначение, Знач Значение, Знач ДополнительнаяСправка = "") Экспорт

	ПеречисленияКласса.Вставить(ПользовательскоеЗначение, 
								НовоеПеречисление(ПользовательскоеЗначение, Значение, ДополнительнаяСправка));
	
КонецПроцедуры

Функция НовоеПеречисление(Знач Наименование, Знач Значение, Знач ДополнительнаяСправка = "")
	
	Возврат Новый Структура("Наименование, Значение, ДополнительнаяСправка", Наименование, Значение, ДополнительнаяСправка);

КонецФункции

ПеречисленияКласса = Новый Соответствие;

ОписаниеОшибкиКласса = "";