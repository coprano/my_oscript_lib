///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды <exec-rules>
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать gitrunner

Перем Лог;
Перем РепозиторийGit;

///////////////////////////////////////////////////////////////////////////////

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогРепозитория",
		"Каталог анализируемого репозитория");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "Коммит1",
		"Идентификатор коммита. Если указан, анализируются только файлы, измененные коммитом.
		| Если это merge-request, то изменения между двумя родительскими коммитами.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "Коммит2",
		"Идентификатор коммита. Если указан, то анализируются только файлы, которые отличаются
		| между двумя указанными коммитами.");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-staged-only",
		"Флаг, ограничивающий список обрабатываемых файлов добавленными в индекс git.");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-source-dir",
		"Каталог расположения исходных файлов относительно корня репозитория.
		| Если сценариев несколько,  указываются в кавычках через , . По умолчанию <src>");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-rules",
		"Перечень правил для применения. Если сценариев несколько,  указываются в кавычках через ,");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-cfg-file",
		"Путь к конфигурационному файлу с настройками. Если не указан, используются настройки репозитория либо глобальные");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт

	Параметры = ПараметрыВыполнения(ПараметрыКоманды, Приложение);
	Если Параметры = Неопределено Тогда
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
	КонецЕсли;

	Лог = Параметры.Лог;
	НастройкиИБ = Параметры.НастройкиИБ;
	КаталогРепозитория = Параметры.КаталогРепозитория;
	АдресПоискаКонфигурационногоФайла = Параметры.КаталогКонфигурационногоФайла;
	ИменаЗагружаемыхСценариев = Параметры.Сценарии;
	ЗатребованныеСценарии = Параметры.ИменаСценариев;
	ОбрабатываемыеФайлы = Параметры.ОбрабатываемыеФайлы;
	КаталогиИсходныхПоФайлам = Параметры.КаталогиФайлов;

	УправлениеНастройками = МенеджерНастроек.НастройкиРепозитория(АдресПоискаКонфигурационногоФайла);
	НаборНастроек = СценарииОбработки.ПолучитьСценарииСПараметрамиВыполнения(КаталогРепозитория, ИменаЗагружаемыхСценариев);
	КритичныеОшибки = Новый Массив;
	
	ПараметрыОбработки = СценарииОбработки.ПолучитьСтандартныеПараметрыОбработки();
	ПараметрыОбработки.Лог = Лог;
	ПараметрыОбработки.НастройкиИБ = НастройкиИБ;
	
	Ит = 0;
	Пока Ит < ОбрабатываемыеФайлы.Количество() Цикл
		АнализируемыйФайл = ОбрабатываемыеФайлы[Ит];
		Если АнализируемыйФайл.ЭтоКаталог() Тогда
			Ит = Ит + 1;
			Продолжить;
		КонецЕсли;
		
		Лог.Информация("Анализируется файл <%1>", АнализируемыйФайл.ПолноеИмя);
		
		ИмяФайла = ФайловыеОперации.ПолучитьНормализованныйОтносительныйПуть(КаталогРепозитория,
				СтрЗаменить(АнализируемыйФайл.ПолноеИмя, КаталогРепозитория, ""));
		ИмяПроекта = МенеджерНастроек.ИмяПроектаДляФайла(ИмяФайла);
		НастройкаОбработки = НаборНастроек[ИмяПроекта];
		Если НЕ ЗначениеЗаполнено(НастройкаОбработки) Тогда
			ВызватьИсключение СтрШаблон("Не удалось получить настройки для %1", ИмяФайла);
		КонецЕсли;
		
		ПараметрыОбработки.Настройки = НастройкаОбработки.НастройкиСценариев.Получить("НастройкиСценариев");
		ПараметрыОбработки.КаталогРепозитория = КаталогРепозитория;
		ПараметрыОбработки.ТекущийКаталогИсходныхФайлов = КаталогиИсходныхПоФайлам.Получить(АнализируемыйФайл.ПолноеИмя);
		ПараметрыОбработки.ЗатребованныеСценарии = ЗатребованныеСценарии;

		Для Каждого СценарийОбработки Из НастройкаОбработки.СценарииОбработки Цикл
			Попытка
				ФайлОбработан = СценарийОбработки.ОбработатьФайл(АнализируемыйФайл,
						ПараметрыОбработки.ТекущийКаталогИсходныхФайлов,
						ПараметрыОбработки);
				
				Если НЕ ФайлОбработан Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ФайлДляДопОбработки Из ПараметрыОбработки.ФайлыДляПостОбработки Цикл
					НовыйОбрабатываемыйФайл = ФайловыеОперации.НовыйФайл(ФайлДляДопОбработки);
					ОбрабатываемыеФайлы.Добавить(НовыйОбрабатываемыйФайл);
					КаталогиИсходныхПоФайлам.Вставить(НовыйОбрабатываемыйФайл.ПолноеИмя, ПараметрыОбработки.ТекущийКаталогИсходныхФайлов);
				КонецЦикла;
				
				ПараметрыОбработки.ФайлыДляПостОбработки.Очистить();
			Исключение
				Ошибка = ОписаниеОшибки();
				КритичныеОшибки.Добавить(Ошибка);
				Лог.Информация("Критичная ошибка: %1", Ошибка);
			КонецПопытки;
		КонецЦикла;

		Ит = Ит + 1;
	КонецЦикла;
	
	// В отличие от прекоммита, здесь лучше вывести все криты в конце одним блоком еще раз.
	Если КритичныеОшибки.Количество() Тогда
		Лог.Ошибка("В результате выполнения возникли исключения:");
		Для Каждого ОписаниеОшибки Из КритичныеОшибки Цикл
			Лог.Ошибка(ОписаниеОшибки);
		КонецЦикла;
	КонецЕсли;
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду

Функция РепозиторийGit(КаталогРепозитория = "")
	Если РепозиторийGit = Неопределено Тогда
		РепозиторийGit = Новый ГитРепозиторий;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КаталогРепозитория) И РепозиторийGit.ПолучитьРабочийКаталог() <> КаталогРепозитория Тогда
		РепозиторийGit.УстановитьРабочийКаталог(КаталогРепозитория);
	КонецЕсли;

	Возврат РепозиторийGit;
КонецФункции

Функция ПараметрыВыполнения(ПараметрыКоманды, Приложение)
	Лог = Приложение.ПолучитьЛог();
	НастройкиИБ = Приложение.ПолучитьНастройкиИБ();
    КаталогРепозитория = ЗначениеПараметра(ПараметрыКоманды, "КаталогРепозитория", "");
	Если НЕ ЭтоСуществующийКаталог(КаталогРепозитория) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбрабатываемыеОбъекты = ОбрабатываемыеОбъекты(ПараметрыКоманды, КаталогРепозитория);
	
	КаталогКонфигурационногоФайла = ЗначениеПараметра(ПараметрыКоманды, "-cfg-file", КаталогРепозитория);

	Сценарии = Неопределено;
	ИменаСценариев = Новый Массив;
	ПараметрИменаЗагружаемыхСценариев = ЗначениеПараметра(ПараметрыКоманды, "-rules");
	Если ЗначениеЗаполнено(ПараметрИменаЗагружаемыхСценариев) Тогда
		ПараметрИменаЗагружаемыхСценариев = СтрЗаменить(ПараметрИменаЗагружаемыхСценариев, " ", "");
		Сценарии = СтрРазделить(ПараметрИменаЗагружаемыхСценариев, ",", Ложь);
		ИменаСценариев = СтрРазделить(СтрЗаменить(ПараметрИменаЗагружаемыхСценариев, ".os", ""), ",", Ложь);
	КонецЕсли;

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Лог", Лог);
	ПараметрыВыполнения.Вставить("НастройкиИБ", НастройкиИБ);
	ПараметрыВыполнения.Вставить("КаталогРепозитория", КаталогРепозитория);
	ПараметрыВыполнения.Вставить("КаталогКонфигурационногоФайла", КаталогКонфигурационногоФайла);
	ПараметрыВыполнения.Вставить("Сценарии", Сценарии);
	ПараметрыВыполнения.Вставить("ИменаСценариев", ИменаСценариев);
	ПараметрыВыполнения.Вставить("ОбрабатываемыеФайлы", ОбрабатываемыеОбъекты.Файлы);
	ПараметрыВыполнения.Вставить("КаталогиФайлов", ОбрабатываемыеОбъекты.Каталоги);

	Возврат ПараметрыВыполнения;
КонецФункции

Функция ЗначениеПараметра(НаборПараметров, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено)
	Значение = НаборПараметров[ИмяПараметра];
	Возврат ?(ЗначениеЗаполнено(Значение), Значение, ЗначениеПоУмолчанию);
КонецФункции

Функция ОбрабатываемыеОбъекты(ПараметрыКоманды, КаталогРепозитория)
	ОбрабатыватьТолькоИндексированныеФайлы = ЗначениеПараметра(ПараметрыКоманды, "-staged-only", Ложь);
	Коммиты = МассивКоммитов(ПараметрыКоманды, КаталогРепозитория);
	ПараметрКаталогиИсходныхФайлов = ЗначениеПараметра(ПараметрыКоманды, "-source-dir", "src");
	КаталогиИсходныхФайлов = СтрРазделить(ПараметрКаталогиИсходныхФайлов, ",", Ложь);
	
	Результат = Новый Структура("Файлы, Каталоги", Новый Массив(), Новый Соответствие());
	Если НЕ ОбрабатыватьТолькоИндексированныеФайлы И Коммиты.Количество() = 0 Тогда
		// Обрабатываются все файлы в каталогах исходных файлов
		Для Каждого КаталогИсходныхФайлов Из КаталогиИсходныхФайлов Цикл
			ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогРепозитория, СокрЛП(КаталогИсходныхФайлов));
			Если НЕ ЭтоСуществующийКаталог(ТекущийКаталогИсходныхФайлов) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбрабатываемыеФайлыКаталога = НайтиФайлы(ТекущийКаталогИсходныхФайлов, ПолучитьМаскуВсеФайлы(), Истина);
			Для Каждого ОбрабатываемыйФайлКаталога Из ОбрабатываемыеФайлыКаталога Цикл
				ДобавитьОбрабатываемыйОбъект(Результат, ОбрабатываемыйФайлКаталога, ТекущийКаталогИсходныхФайлов);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Если ОбрабатыватьТолькоИндексированныеФайлы Тогда
			// Обрабатываются только файлы, добавленные в индекс Git
			Изменения = СписокИндексированныхФайлов(КаталогРепозитория);
		Иначе
			// Обрабатываются только файлы, измененные между двумя переданными коммитами или merge-request'ом
			Изменения = СписокИзмененийМеждуКоммитами(Коммиты, КаталогРепозитория);
		КонецЕсли;

		Для Каждого ИмяФайла Из Изменения Цикл
			Для Каждого КаталогИсходныхФайлов Из КаталогиИсходныхФайлов Цикл
				ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогРепозитория, СокрЛП(КаталогИсходныхФайлов));
				Если ЭтоСуществующийКаталог(ТекущийКаталогИсходныхФайлов)
						И ФайловыеОперации.ФайлНаходитсяВКаталоге(ИмяФайла, ТекущийКаталогИсходныхФайлов) Тогда
					ДобавитьОбрабатываемыйОбъект(Результат, ИмяФайла, ТекущийКаталогИсходныхФайлов);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ДобавитьОбрабатываемыйОбъект(Коллекция, Знач Файл, Знач Каталог)
	ОбрабатываемыйФайл = ФайловыеОперации.НовыйФайл(Файл);
	Коллекция.Файлы.Добавить(ОбрабатываемыйФайл);
	Коллекция.Каталоги.Вставить(ОбрабатываемыйФайл.ПолноеИмя, Каталог);
КонецПроцедуры

Функция ЭтоСуществующийКаталог(Каталог)
	КаталогОбъект = Новый Файл(Каталог);
	Если НЕ КаталогОбъект.Существует() Тогда
		Лог.Ошибка("Каталог <%1> не существует", Каталог);
		Возврат Ложь;
	ИначеЕсли НЕ КаталогОбъект.ЭтоКаталог() Тогда
		Лог.Ошибка("Каталог <%1> является файлов", Каталог);
		Возврат Ложь;
	Иначе
		Каталог = КаталогОбъект.ПолноеИмя;
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция МассивКоммитов(ПараметрыКоманды, КаталогРепозитория)
	Коммиты = Новый Массив;
	Репозиторий = РепозиторийGit(КаталогРепозитория);
	Если НЕ Репозиторий.ЭтоРепозиторий() Тогда
		Возврат Коммиты;
	КонецЕсли;

	Коммит1 = ЗначениеПараметра(ПараметрыКоманды, "Коммит1", "");
	Если НЕ ПустаяСтрока(Коммит1) Тогда
		Коммит2 = ЗначениеПараметра(ПараметрыКоманды, "Коммит2", "");
		Если ПустаяСтрока(Коммит2) Тогда
			Коммиты = РодительскиеКоммиты(Коммит1);
		Иначе
			Коммиты.Добавить(Коммит1);
			Коммиты.Добавить(Коммит2);
		КонецЕсли;
	КонецЕсли;

	Возврат Коммиты;
КонецФункции

Функция РодительскиеКоммиты(Коммит)
	Коммиты = Новый Массив;
	Git = РепозиторийGit();
	Git.ВыполнитьКоманду(МассивПараметров("cat-file", "-p", Коммит));
	Результат = Git.ПолучитьВыводКоманды();

	РегулярноеВыражение = Новый РегулярноеВыражение("parent (\w+)");
	Совпадения = РегулярноеВыражение.НайтиСовпадения(Результат);
	Если НЕ ДваЭлементаВКоллекции(Совпадения) Тогда
		Лог.Ошибка("В команду необходимо передать два коммита или коммит с двумя родителями (объединение веток).");
		ВызватьИсключение "Не удалось составить список измененных файлов коммита";
	КонецЕсли;

	Для Каждого Совпадение Из Совпадения Цикл
		Группа = Совпадение.Группы[1];
		Коммиты.Добавить(Группа.Значение);
	КонецЦикла;

	Возврат Коммиты;
КонецФункции

Функция МассивПараметров(Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено)
	Массив = Новый Массив;
	Массив.Добавить(Параметр1);

	Если Параметр2 <> Неопределено Тогда
		Массив.Добавить(Параметр2);
	КонецЕсли;
	Если Параметр3 <> Неопределено Тогда
		Массив.Добавить(Параметр3);
	КонецЕсли;
	Если Параметр4 <> Неопределено Тогда
		Массив.Добавить(Параметр4);
	КонецЕсли;

	Возврат Массив;
КонецФункции

Функция СписокИзмененийМеждуКоммитами(Коммиты, КаталогРепозитория)
	Если НЕ ДваЭлементаВКоллекции(Коммиты) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ПараметрыКоманды = МассивПараметров(СтрШаблон("diff --name-only %1 %2", Коммиты[0], Коммиты[1]));
	Возврат ИзмененияРепозитория(КаталогРепозитория, ПараметрыКоманды);
КонецФункции

Функция СписокИндексированныхФайлов(КаталогРепозитория)
	ПараметрыКоманды = МассивПараметров("diff --name-only --staged");
	Возврат ИзмененияРепозитория(КаталогРепозитория, ПараметрыКоманды);
КонецФункции

Функция ИзмененияРепозитория(КаталогРепозитория, ПараметрыКоманды)
	Git = РепозиторийGit(КаталогРепозитория);
	Git.ВыполнитьКоманду(ПараметрыКоманды);
	Результат = Git.ПолучитьВыводКоманды();

	Если ПустаяСтрока(Результат) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ИзмененныеФайлы = СтрРазделить(СокрЛП(Результат), Символы.ПС);
	Для Индекс = 0 По ИзмененныеФайлы.ВГраница() Цикл
		ИзмененныеФайлы[Индекс] = ОбъединитьПути(КаталогРепозитория, СокрЛП(ИзмененныеФайлы[Индекс]));
	КонецЦикла;

	Возврат ИзмененныеФайлы;
КонецФункции

Функция ДваЭлементаВКоллекции(Коллекция)
	ЗначениеСравнения = 2;
	Возврат Коллекция.Количество() = ЗначениеСравнения;
КонецФункции
