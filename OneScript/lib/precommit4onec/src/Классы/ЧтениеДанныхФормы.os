//////////////////////////////////////////////////////////////////////////////////
//
// Класс предназначен для получения данных элементов и реквизитов формы из
//	текста файла формы
//
// (с) BIA Technologies, LLC
//
//////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

Перем МассивСтрок;
Перем Курсор;
Перем ТипЭлемента;
Перем Элементы;
Перем СтрокаАтрибутов;
Перем Атрибуты;

Перем ВыражениеНачалоЭлемента;
Перем ВыражениеКонецЭлемента;
Перем ВыражениеСтрокаЭлемента;
Перем ВыражениеСтрокаСоЗначением;
Перем ВыражениеЗначенияАтрибутов;

Перем Имя Экспорт;
Перем Значение Экспорт;

#КонецОбласти

#Область Конструктор

// Инициализация объекта.
//
// Параметры:
//	ДанныеФормы - Массив из Строка - массив строк, прочитанных из файла формы.
//
Процедура ПриСозданииОбъекта(ДанныеФормы)
	Если ТипЗнч(ДанныеФормы) <> Тип("Массив") Тогда
		ВызватьИсключение "Переданный параметр не является массивом";
	КонецЕсли;

	МассивСтрок = ДанныеФормы;
	Элементы = Новый Массив;
	
	ВыражениеНачалоЭлемента = РегулярныеВыражения.Создать("<([\w:]+)([\w :=""\/.-]*?)>");
	ВыражениеКонецЭлемента = РегулярныеВыражения.Создать("</([\w:]+)[\w :=""\/.-]*?>");
	ВыражениеСтрокаЭлемента = РегулярныеВыражения.Создать("<([\w:]+)([\w :=""\/.-]*?)/>");
	ВыражениеСтрокаСоЗначением = РегулярныеВыражения.Создать("<([\w:]+)([\w :=""\/.-]*?)>(.*)</([\w:]+)[\w :=""\/.-]*?>");
	ВыражениеЗначенияАтрибутов = РегулярныеВыражения.Создать("([\w:]+)=""([\w:\/.-]+)""");

	Сбросить();
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Метод последовательного чтения и анализа данных строк формы. При каждом вызове курсор сдвигается на следующую строку.
//
// Возвращаемое значение:
//	Булево - Истина в случае, если строка была успешно разобрана, Ложь, если были обработаны все строки.
//
Функция Прочитать() Экспорт
	Курсор = Курсор + 1;
	Если Курсор < 0 ИЛИ Курсор > МассивСтрок.ВГраница() Тогда
		ОчиститьЗначенияПеременных();
		Возврат Ложь;
	КонецЕсли;

	РазобратьТекущуюСтроку();
	Возврат Истина;
КонецФункции

// Сбрасывает значение курсора на начало файла, позволяя обойти все строки заново.
//
Процедура Сбросить() Экспорт
	Курсор = -1;
	ОчиститьЗначенияПеременных();
КонецПроцедуры

// Возвращает иерархию элементов формы, являющихся владельцами текущей обрабатываемой строки.
//
// Возвращаемое значение:
//	Строка - строка иерархии элементов формы, разделенных точкой.
//
Функция Путь() Экспорт
	Возврат СтрСоединить(Элементы, ".");
КонецФункции

// Возвращает номер текущей обрабатываемой строки.
//
// Возвращаемое значение:
//	Число, Неопределено - Если обработка файла не началась, возвращает Неопределено, иначе - номер обрабатываемой строки.
//
Функция НомерСтроки() Экспорт
	Возврат ?(Курсор < 0, -1, Курсор);
КонецФункции

// Возвращает значение идентификатора текущего элемента. Для формата конфигуратора он хранится в атрибутах тэга, для
//	формата EDT - это отдельный тэг.
//
// Возвращаемое значение:
//	Строка, Неопределено - идентификатор элемента или Неопределено, если у элемента идентификатора нет.
//
Функция ИдентификаторЭлемента() Экспорт
	Возврат ?(Имя = "id", Значение, ЗначениеАтрибута("id"));
КонецФункции

// Возвращает значение имени текущего элемента. Для формата конфигуратора оно хранится в атрибутах тэга, для
//	формата EDT - это отдельный тэг.
//
// Возвращаемое значение:
//	Строка, Неопределено - имя элемента или Неопределено, если у элемента нет имени.
//
Функция ИмяЭлемента() Экспорт
	Возврат ?(Имя = "name", Значение, ЗначениеАтрибута("name"));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РазобратьТекущуюСтроку()
	ОчиститьЗначенияПеременных();
	ТекущаяСтрока = МассивСтрок[Курсор];

	Совпадения = ВыражениеСтрокаСоЗначением.НайтиСовпадения(ТекущаяСтрока);
	Если Совпадения.Количество() > 0 Тогда
		Совпадение = Совпадения[0];
		НачалоТэга = Совпадение.Группы[1].Значение;
		СтрокаАтрибутов = Совпадение.Группы[2].Значение;
		Атрибуты = ЗначенияАтрибутов();
		ТекстЭлемента = Совпадение.Группы[3].Значение;
		КонецТэга = Совпадение.Группы[4].Значение;

		Если НачалоТэга <> КонецТэга Тогда
			ВызватьИсключение СтрШаблон("Неизвестный формат строки: %1", Совпадение.Группы[0].Значение);
		КонецЕсли;

		Имя = НачалоТэга;
		Значение = ТекстЭлемента;
		ТипЭлемента = ТипСтрокаЭлемента();

		ОбновитьИмяЭлемента();
		
		Возврат;
	КонецЕсли;
	
	Совпадения = ВыражениеСтрокаЭлемента.НайтиСовпадения(ТекущаяСтрока);
	Если Совпадения.Количество() > 0 Тогда
		Совпадение = Совпадения[0];
		Имя = Совпадение.Группы[1].Значение;
		СтрокаАтрибутов = Совпадение.Группы[2].Значение;
		Атрибуты = ЗначенияАтрибутов();
		ТипЭлемента = ТипСтрокаЭлемента();

		Возврат;
	КонецЕсли;

	Совпадения = ВыражениеКонецЭлемента.НайтиСовпадения(ТекущаяСтрока);
	Если Совпадения.Количество() > 0 Тогда
		Совпадение = Совпадения[0];
		Имя = Совпадение.Группы[1].Значение;
		ТипЭлемента = ТипКонецТэга();

		Если Элементы.Количество() > 0 Тогда
			Элементы.Удалить(Элементы.ВГраница());
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	Совпадения = ВыражениеНачалоЭлемента.НайтиСовпадения(ТекущаяСтрока);
	Если Совпадения.Количество() > 0 Тогда
		Совпадение = Совпадения[0];
		Имя = Совпадение.Группы[1].Значение;
		СтрокаАтрибутов = Совпадение.Группы[2].Значение;
		Атрибуты = ЗначенияАтрибутов();
		ТипЭлемента = ТипНачалоТэга();

		Элементы.Добавить(Имя);
		
		ОбновитьИмяЭлемента();
		Возврат;
	КонецЕсли;

	Если СтрНачинаетсяС(ТекущаяСтрока, "<?xml") Тогда
		ТипЭлемента = ТипЗаголовокФайла();
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекущаяСтрока, "<!--") Тогда
		ТипЭлемента = ТипКомментарий();
		Возврат;
	КонецЕсли;
	
	ТипЭлемента = ТипМногострочнаяСтрока();
КонецПроцедуры

Процедура ОбновитьИмяЭлемента()
	ИмяЭлемента = ИмяЭлемента();
	Если ЗначениеЗаполнено(ИмяЭлемента) И Элементы.Количество() > 0 Тогда
		Элементы[Элементы.ВГраница()] = СтрШаблон("%1.%2", Элементы[Элементы.ВГраница()], ИмяЭлемента);
	КонецЕсли;
КонецПроцедуры

Функция ЗначенияАтрибутов()
	Результат = Новый Соответствие;
	Если ПустаяСтрока(СтрокаАтрибутов) Тогда
		Возврат Результат;
	КонецЕсли;

	Совпадения = ВыражениеЗначенияАтрибутов.НайтиСовпадения(СтрокаАтрибутов);
	Если Совпадения.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Совпадение Из Совпадения Цикл
		Атрибут = Совпадение.Группы[1].Значение;
		ЗначениеАтрибута = Совпадение.Группы[2].Значение;
		Результат.Вставить(Атрибут, ЗначениеАтрибута)
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ЗначениеАтрибута(ИмяАтрибута)
	Возврат Атрибуты.Получить(ИмяАтрибута);
КонецФункции

Функция ТипНачалоТэга()
	Возврат "НачалоТэга";
КонецФункции

Функция ТипКонецТэга()
	Возврат "КонецТэга";
КонецФункции

Функция ТипСтрокаЭлемента()
	Возврат "СтрокаЭлемента";
КонецФункции

Функция ТипЗаголовокФайла()
	Возврат "ЗаголовокФайла";
КонецФункции

Функция ТипКомментарий()
	Возврат "Комментарий";
КонецФункции

Функция ТипМногострочнаяСтрока()
	Возврат "МногострочнаяСтрока";
КонецФункции

Процедура ОчиститьЗначенияПеременных()
	ТипЭлемента = "";
	Имя = "";
	Значение = "";
	СтрокаАтрибутов = "";
	Атрибуты = Новый Соответствие;
КонецПроцедуры

#КонецОбласти
