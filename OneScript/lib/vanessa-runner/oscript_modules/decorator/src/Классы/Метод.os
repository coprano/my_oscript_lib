#Использовать "../internal"

#Область ОписаниеПеременных

Перем Имя;        // Имя метода
Перем Аннотации;  // Аннотации метода
Перем Тело;       // Тело метода
Перем Параметры;  // Параметры метода
Перем Публичный;  // Экспортный метод
Перем ЭтоФункция; // Этот метод функция

#КонецОбласти

// Конструктор
//
// Параметры:
//   ИмяМетода - Строка - Имя создаваемого метода
//
Процедура ПриСозданииОбъекта(ИмяМетода)

	Имя = ИмяМетода;

	Аннотации  = Новый Массив;
	Параметры  = Новый Массив;
	Тело       = "";
	Публичный  = Ложь;
	ЭтоФункция = Истина;

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Добавляет аннотацию метода
//
// Параметры:
//   Аннотация - Аннотация - Добавляемая аннотация
//
//  Возвращаемое значение:
//   Метод - Ссылка на текущий инстанс Метод
//
Функция Аннотация(Аннотация) Экспорт

	Аннотации.Добавить(Аннотация);
	
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает тело метода
//
// Параметры:
//   ТелоМетода - Строка - Устанавливаемое тело метода
//
//  Возвращаемое значение:
//   Метод - Ссылка на текущий инстанс Метод
//
Функция ТелоМетода(ТелоМетода) Экспорт
	
	Тело = ТелоМетода;

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет параметр метода
//
// Параметры:
//   Параметр - ПараметрМетода - Добавляемый параметр метода
//
//  Возвращаемое значение:
//   Метод - Ссылка на текущий инстанс Метод
//
Функция Параметр(Параметр) Экспорт
	
	Параметры.Добавить(Параметр);

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает экспорт метода
//
//  Возвращаемое значение:
//   Метод - Ссылка на текущий инстанс Метод
//
Функция Публичный() Экспорт

	Публичный = Истина;

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает признак того что этот метод Процедура
//
//  Возвращаемое значение:
//   Метод - Ссылка на текущий инстанс Метод
//
Функция ЭтоПроцедура() Экспорт

	ЭтоФункция = Ложь;

	Возврат ЭтотОбъект;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Имя метода
//
//  Возвращаемое значение:
//   Строка - Имя метода
//
Функция ИмяМетода() Экспорт
	Возврат Имя;
КонецФункции

// Строковое представление метода
//
//  Возвращаемое значение:
//   Строка - Строковое представление метода
//
Функция Описание() Экспорт

	ОписаниеПараметров = Новый Массив();
	ИменаПараметров    = Новый Массив();

	Для Каждого Параметр Из Параметры Цикл

		ОписаниеПараметров.Добавить(
			Параметр.Описание()
		);

		ИменаПараметров.Добавить(
			Параметр.Имя()
		);

	КонецЦикла;

	НовыйМетод = КэшируемыеДанные.ТекстШаблонаПользовательскогоМетода();
	
	
	ШаблонВыполняемаяСтрока = "ДекораторВнутренний_%1(%2);";
	
	Если ЭтоФункция Тогда
		ШаблонВыполняемаяСтрока = "Декоратор_ВозвращаемоеИзМетодаЗначение = " + ШаблонВыполняемаяСтрока;
	КонецЕсли;
	
	ВыполняемаяСтрока = СтрШаблон(ШаблонВыполняемаяСтрока, Имя, СтрСоединить(ИменаПараметров, ", "));

	НовыйМетод = СтрЗаменить(НовыйМетод, "// {Декоратор_ВыполняемаяСтрока}", ВыполняемаяСтрока);

	Если ЭтоФункция Тогда
		
		НовыйМетод = СтрЗаменить(НовыйМетод, "{Функция}", "Функция");
		НовыйМетод = СтрЗаменить(НовыйМетод, "{КонецФункции}", "КонецФункции");

		НовыйМетод = СтрЗаменить(
			НовыйМетод,
			"// {Декоратор_ВозвращаемоеЗначение}",
			"Возврат Декоратор_ВозвращаемоеИзМетодаЗначение;"
		);

	Иначе

		НовыйМетод = СтрЗаменить(НовыйМетод, "{Функция}", "Процедура");
		НовыйМетод = СтрЗаменить(НовыйМетод, "{КонецФункции}", "КонецПроцедуры");

	КонецЕсли;

	СтрокаАннотацийМетода    = АннотацииМенеджер.ОписаниеАннотаций(Аннотации);
	ОписаниеПараметровМетода = СтрСоединить(ОписаниеПараметров, ", ");

	НовыйМетод = СтрЗаменить(НовыйМетод, "// {АннотацияМетода}", СтрокаАннотацийМетода);
	НовыйМетод = СтрЗаменить(НовыйМетод, "Декоратор_ИмяМетода", Имя);
	НовыйМетод = СтрЗаменить(НовыйМетод, "ДекораторВнутренний_ИмяМетода", "ДекораторВнутренний_" + Имя);
	НовыйМетод = СтрЗаменить(НовыйМетод, "Декоратор_ОписаниеПараметровМетода", ОписаниеПараметровМетода);
	НовыйМетод = СтрЗаменить(НовыйМетод, "// {Декоратор_ТекстМетода}", Тело);
	НовыйМетод = СтрЗаменить(НовыйМетод, "// {Экспорт}", ?(Публичный, "Экспорт", ""));

	Возврат НовыйМетод;

КонецФункции

#КонецОбласти
