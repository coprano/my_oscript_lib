///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией сценариев обработки файлов <ПроверкаКорректностиИнструкцийПрепроцессора>
//
///////////////////////////////////////////////////////////////////////////////

Перем Лог;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "ПроверкаКорректностиИнструкцийПрепроцессора";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	Если АнализируемыйФайл.Существует() И ТипыФайлов.ЭтоФайлИсходников(АнализируемыйФайл) Тогда
		
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		
		ПроверитьНаКорректностьИнструкций(АнализируемыйФайл.ПолноеИмя);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОбработатьФайл()

Процедура ПроверитьНаКорректностьИнструкций(ПутьКФайлуМодуля)
	
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуМодуля);
	
	ТекстРазбора = Новый ТекстовыйДокумент;
	ТекстРазбора.УстановитьТекст(СодержимоеФайла);
	ВсегоСтрок = ТекстРазбора.КоличествоСтрок();

	ШаблонПоиска = Новый РегулярноеВыражение("^[\t ]*?#[\t ]*(?:(.*?)[\t ]*\/\/|(.*?)[\t ]*$)");
	ШаблонПоиска.Многострочный = Истина;
	ШаблонПоиска.ИгнорироватьРегистр = Истина;
	
	Совпадения = ШаблонПоиска.НайтиСовпадения(СодержимоеФайла);

	Ошибки = Новый Массив();
	ЕстьОшибкаПорядкаИнструкции = Ложь;
	ВсеТокены       = ВсеТокены();
	ТокеныОбласть   = ТокеныОбласть();
	ТокеныЕсли      = ТокеныЕсли();
	ТокеныИначеЕсли = ТокеныИначеЕсли();
	ТокеныИначе     = ТокеныИначе();
	ТокеныКонецЕсли = ТокеныКонецЕсли();
	УровеньЕсли       = 0;
	ФлагиТокеновИначе = Новый Массив();
	Для Каждого Совпадение Из Совпадения Цикл
		
		Инструкция = Совпадение.Группы[1].Значение;
		Если ПустаяСтрока(Инструкция) Тогда
			Инструкция = Совпадение.Группы[2].Значение;
		КонецЕсли;

		НомерСтроки = 0;
		Если ПустаяСтрока(Инструкция) Тогда
			Ошибки.Добавить(СтрШаблон("Пустая инструкция в строке [%1]", НомерСтрокиСовпадения(НомерСтроки, СодержимоеФайла, Совпадение)));
		 	Продолжить;
		КонецЕсли;
		
		ЧастиИнструкции = СтрРазделить(Инструкция, " 	()", Ложь);

		ПервыйТокен = НРег(СокрЛП(ЧастиИнструкции[0]));
		Если ТокеныОбласть.Найти(ПервыйТокен) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ТокеныЕсли.Найти(ПервыйТокен) <> Неопределено Тогда
			УровеньЕсли = УровеньЕсли + 1;
			Если ФлагиТокеновИначе.Количество() < УровеньЕсли Тогда // Это первый блок Если на текущем уровне
				ФлагиТокеновИначе.Добавить(Ложь);
			Иначе
				ФлагиТокеновИначе[УровеньЕсли - 1] = Ложь; // Обновляем флаг, т.к. это может быть не первый блок Если на текущем уровне
			КонецЕсли;
		ИначеЕсли ТокеныИначеЕсли.Найти(ПервыйТокен) <> Неопределено Тогда
			Если УровеньЕсли < 1 Или ФлагиТокеновИначе[УровеньЕсли - 1] Тогда
				ЕстьОшибкаПорядкаИнструкции = Истина;
			КонецЕсли;
		ИначеЕсли ТокеныИначе.Найти(ПервыйТокен) <> Неопределено Тогда
			Если УровеньЕсли > 0 Тогда
				ФлагиТокеновИначе[УровеньЕсли - 1] = Истина;
			Иначе
				ЕстьОшибкаПорядкаИнструкции = Истина;
			КонецЕсли;
		ИначеЕсли ТокеныКонецЕсли.Найти(ПервыйТокен) <> Неопределено Тогда
			Если УровеньЕсли > 0 Тогда
				УровеньЕсли = УровеньЕсли - 1;
			Иначе
				ЕстьОшибкаПорядкаИнструкции = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьОшибкаПорядкаИнструкции Тогда
			Ошибки.Добавить(СтрШаблон(
					"Нарушен порядок инструкции [%1] в строке [%2]",
					ЧастиИнструкции[0], НомерСтрокиСовпадения(НомерСтроки, СодержимоеФайла, Совпадение)));
			Прервать;
		КонецЕсли;

		Для Каждого Часть Из ЧастиИнструкции Цикл
			Токен = НРег(СокрЛП(Часть));
			Если Не ПустаяСтрока(Токен) И ВсеТокены.Найти(Токен) = Неопределено Тогда
				Ошибки.Добавить(СтрШаблон(
						"Неизвестная инструкция [%1] в строке [%2]",
						Часть, НомерСтрокиСовпадения(НомерСтроки, СодержимоеФайла, Совпадение)));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

	Если Не ЕстьОшибкаПорядкаИнструкции И УровеньЕсли <> 0 Тогда
		Ошибки.Добавить("Нарушена парность инструкций [#Если/#КонецЕсли]");
	КонецЕсли;

	Если Ошибки.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

Функция НомерСтрокиСовпадения(НомерСтроки, СодержимоеФайла, Совпадение)

	Если НомерСтроки = 0 Тогда
		НомерСтроки = СтрЧислоСтрок(Лев(СодержимоеФайла, Совпадение.Индекс + 1));
	КонецЕсли;

	Возврат НомерСтроки;
	
КонецФункции

Функция ТокеныОбласть()
	Результат = Новый Массив();
	Результат.Добавить("область");
	Результат.Добавить("region");
	Результат.Добавить("конецобласти");
	Результат.Добавить("endregion");
	Возврат Результат;
КонецФункции

Функция ТокеныЕсли()
	Результат = Новый Массив();
	Результат.Добавить("если");
	Результат.Добавить("if");
	Возврат Результат;
КонецФункции

Функция ТокеныИначеЕсли()
	Результат = Новый Массив();
	Результат.Добавить("иначеесли");
	Результат.Добавить("elseif");
	Возврат Результат;
КонецФункции

Функция ТокеныИначе()
	Результат = Новый Массив();
	Результат.Добавить("иначе");
	Результат.Добавить("else");
	Возврат Результат;
КонецФункции

Функция ТокеныКонецЕсли()
	Результат = Новый Массив();
	Результат.Добавить("конецесли");
	Результат.Добавить("endif");
	Возврат Результат;
КонецФункции

Функция ВсеТокены()
	
	Результат = Новый Массив();

	Для Каждого Токен Из ТокеныОбласть() Цикл
		Результат.Добавить(Токен);
	КонецЦикла;
	Для Каждого Токен Из ТокеныЕсли() Цикл
		Результат.Добавить(Токен);
	КонецЦикла;
	Для Каждого Токен Из ТокеныИначеЕсли() Цикл
		Результат.Добавить(Токен);
	КонецЦикла;
	Для Каждого Токен Из ТокеныИначе() Цикл
		Результат.Добавить(Токен);
	КонецЦикла;
	Для Каждого Токен Из ТокеныКонецЕсли() Цикл
		Результат.Добавить(Токен);
	КонецЦикла;
	
	Результат.Добавить("вставка");
	Результат.Добавить("insert");
	
	Результат.Добавить("конецвставки");
	Результат.Добавить("endinsert");
	
	Результат.Добавить("удаление");
	Результат.Добавить("delete");
	
	Результат.Добавить("конецудаления");
	Результат.Добавить("enddelete");
	
	Результат.Добавить("тогда");
	Результат.Добавить("then");
	
	Результат.Добавить("и");
	Результат.Добавить("and");

	Результат.Добавить("или");
	Результат.Добавить("or");
	
	Результат.Добавить("не");
	Результат.Добавить("not");

	Результат.Добавить("клиент");
	Результат.Добавить("client");

	Результат.Добавить("наклиенте");
	Результат.Добавить("atclient");

	Результат.Добавить("насервере");
	Результат.Добавить("atserver");

	Результат.Добавить("сервер");
	Результат.Добавить("server");

	Результат.Добавить("тонкийклиент");
	Результат.Добавить("thinclient");

	Результат.Добавить("вебклиент");
	Результат.Добавить("webclient");
	
	Результат.Добавить("мобильныйавтономныйсервер");
	Результат.Добавить("mobilestandaloneserver");
	
	Результат.Добавить("мобильноеприложениеклиент");
	Результат.Добавить("mobileappclient");

	Результат.Добавить("мобильноеприложениесервер");
	Результат.Добавить("mobileappserver");

	Результат.Добавить("мобильныйклиент");
	Результат.Добавить("mobileclient");
	
	Результат.Добавить("толстыйклиентобычноеприложение");
	Результат.Добавить("thickclientordinaryapplication");

	Результат.Добавить("толстыйклиентуправляемоеприложение");
	Результат.Добавить("thickclientmanagedapplication");

	Результат.Добавить("внешнеесоединение");
	Результат.Добавить("externalconnection");

	Возврат Результат;
	
КонецФункции
