///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов ВставкаКопирайтов
//
///////////////////////////////////////////////////////////////////////////////

Перем Лог;
Перем Настройки;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "ВставкаКопирайтов";

КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов, относительно каталога репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	Если АнализируемыйФайл.Существует() И ТипыФайлов.ЭтоФайлИсходников(АнализируемыйФайл) Тогда
		Настройки = ДополнительныеПараметры.Настройки;
		
		ПутьКФайлуКопирайта = ОбъединитьПути(ДополнительныеПараметры.КаталогРепозитория, ПутьКФайлуКопирайта());
		ФайлКопирайта = Новый Файл(ПутьКФайлуКопирайта);
		Если НЕ ФайлКопирайта.Существует() Тогда

			Возврат Ложь;

		КонецЕсли;

		Если Не ДополнительныеПараметры.Свойство("АктуальныйКопирайт") Тогда
			АктуализироватьКопирайт(ПутьКФайлуКопирайта, ДополнительныеПараметры);
		КонецЕсли;
		
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		Если ИгнорироватьМодулиОбъектовПоставки(Настройки) И КонфигурацияПоставщика.ЭтоМодульОбъектаПоставки(АнализируемыйФайл, ДополнительныеПараметры) Тогда
			Лог.Информация("Файл '%1' находится на поддержке и не был обработан", АнализируемыйФайл.ПолноеИмя);
			Возврат Ложь;
		КонецЕсли;
		
		Если УстановитьКопирайтПриНеобходимости(АнализируемыйФайл.ПолноеИмя, ФайлКопирайта.ПолноеИмя) Тогда

			ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(АнализируемыйФайл.ПолноеИмя);
			
			// для постобработки другим сценарием
			ДополнительныеПараметры.ФайлыДляПостОбработки.Добавить(АнализируемыйФайл.ПолноеИмя);
			Возврат Истина;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ОбработатьФайл()

Функция ПутьКФайлуКопирайта()
	ЗначениеПоУмолчанию = "COPYRIGHT";
	Результат = МенеджерНастроек.ЗначениеПоКлючу(Настройки, "ВставкаКопирайтов.ПутьКФайлуКопирайта");
	Возврат ?(Результат = Неопределено, ЗначениеПоУмолчанию, Результат);
КонецФункции

Функция ИгнорируемыеТегиСтрокой()
	ЗначениеПоУмолчанию = Новый Массив;
	ЗначениеПоУмолчанию.Добавить("// IMPORT");

	Теги = МенеджерНастроек.ЗначениеПоКлючу(Настройки, "ВставкаКопирайтов.ИсключаемыеТеги");
	ТегиСтрокой = СтрСоединить(?(Теги = Неопределено, ЗначениеПоУмолчанию, Теги), "\s|");

	Возврат СтрШаблон("(%1\s)", ТегиСтрокой);
КонецФункции

Функция ИгнорироватьМодулиОбъектовПоставки(Настройки)
	ЗначениеПоУмолчанию = Истина;
	Результат = МенеджерНастроек.ЗначениеПоКлючу(Настройки, "ВставкаКопирайтов.ИгнорироватьМодулиОбъектовПоставки");
	Возврат ?(Результат = Неопределено, ЗначениеПоУмолчанию, Результат);
КонецФункции

Процедура АктуализироватьКопирайт(ПутьКФайлуКопирайта, ДополнительныеПараметры)
	ТекстКопирайта = СокрЛП(ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуКопирайта));
	
	РегуляркаДатыКопирайта = Новый РегулярноеВыражение("\s(\d{4})-(\d{4})");
	РегуляркаДатыКопирайта.Многострочный = Истина;
	РегуляркаДатыКопирайта.ИгнорироватьРегистр = Истина;

	КоллекцияСовпадений = РегуляркаДатыКопирайта.НайтиСовпадения(ТекстКопирайта);
	Если КоллекцияСовпадений.Количество() > 0 Тогда
		Совпадение = КоллекцияСовпадений[0];
		ТекстЗамены = СтрШаблон(" %1-%2", Совпадение.Группы[1].Значение, Год(ТекущаяУниверсальнаяДата()));
		ТекстКопирайта = РегуляркаДатыКопирайта.Заменить(ТекстКопирайта, ТекстЗамены);

		ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлуКопирайта, ТекстКопирайта);

		ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(ПутьКФайлуКопирайта);
	КонецЕсли;

	ДополнительныеПараметры.Вставить("АктуальныйКопирайт", Истина);
КонецПроцедуры

Функция УстановитьКопирайтПриНеобходимости(ПутьКФайлуМодуля, ПутьКФайлуКопирайта)
	
	ТекстКопирайта = СокрЛП(ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуКопирайта));
	
	ТекстОшибки = "";
	
	РегуляркаОтключитьСценарий = Новый РегулярноеВыражение(ИгнорируемыеТегиСтрокой());
	РегуляркаОтключитьСценарий.Многострочный = Истина;
	РегуляркаОтключитьСценарий.ИгнорироватьРегистр = Истина;
	
	РегуляркаКопирайта = Новый РегулярноеВыражение("([\/]{2}©[\/]{2,}©[\/]{2}\s?)");
	РегуляркаКопирайта.Многострочный = Истина;
	РегуляркаКопирайта.ИгнорироватьРегистр = Истина;
	
	НовыйТекстМодуля = "";
	
	ТекстМодуля = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуМодуля);
	
	Если НЕ ПустаяСтрока(ТекстМодуля) И НЕ РегуляркаОтключитьСценарий.Совпадает(ТекстМодуля) Тогда
		
		КоллекцияСовпадений = РегуляркаКопирайта.НайтиСовпадения(ТекстМодуля);
		
		Если КоллекцияСовпадений.Количество() = 0 Тогда
			
			ТекстОшибки = "Нет копирайта в модуле";
			НовыйТекстМодуля =  ТекстКопирайта + Символы.ПС + Символы.ПС + СокрЛП(ТекстМодуля);
			
		ИначеЕсли КоллекцияСовпадений.Количество() <> 2 Тогда
			
			Лог.Ошибка("Модуль '%1'
						|содержит несколько блоков, похожих на части копирайта.
						|Удалите лишние (либо все) блоки относящиеся к копирайту.", ПутьКФайлуМодуля);
			ВызватьИсключение "Копирайт не может быть проверен/скорректирован";
		
		Иначе
			
			КонецКопирайта = КоллекцияСовпадений[1].Индекс + КоллекцияСовпадений[1].Длина;
			
			Если СтрСравнить(ТекстКопирайта, СокрЛП(СтрЗаменить(Лев(ТекстМодуля, КонецКопирайта), Символы.ВК, ""))) <> 0 Тогда
				
				ТекстОшибки = "Неактульный копирайт";
				
				НовыйТекстМодуля = ТекстКопирайта + Символы.ПС + Символы.ПС + СокрЛП(Прав(ТекстМодуля, СтрДлина(ТекстМодуля) - КонецКопирайта));
	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлуМодуля, НовыйТекстМодуля);

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;
	
КонецФункции
