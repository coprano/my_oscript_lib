//////////////////////////////////////////////////////////////////////////////////
//
// Класс предназначен для чтения данных из файлов форм объектов и их последующей
//	обработки.
//
// (с) BIA Technologies, LLC	
//
//////////////////////////////////////////////////////////////////////////////////

// BSLLS:LineLength-off

#Область ОписаниеПеременных

Перем ДанныеФормы;						// Массив строк файла формы
Перем ДанныеБазовойФормы;				// Массив строк файла формы
Перем ФорматEDT;						// Булево, определяющее формат данных формы
Перем ЭлементыФормы;					// 
Перем ЭлементыБазовойФормы;				// 
Перем ТаблицаДублей;					// 
Перем СвободныеИдентификаторы;			// 
Перем ПоследнийИдентификатор;			// 

Перем ФормаИзменена;					// Флаг, отражающий наличие внесенных в форму изменений

#КонецОбласти

#Область Конструктор

// Инициализация объекта.
//
// Параметры:
//	Файл - Файл - объект файла формы, данные которой нужно прочитать.
//
Процедура ПриСозданииОбъекта(Файл)
	Если НЕ ЗначениеЗаполнено(Файл) Тогда
		ВызватьИсключение "В конструктор объекта не передан файл формы";
	КонецЕсли;

	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение СтрШаблон("Не найден файл: %1", Файл.ПолноеИмя);
	КонецЕсли;

	ФорматEDT = ТипыФайлов.ЭтоФайлОписанияФормыEDT(Файл);
	Если НЕ ФорматEDT И НЕ ТипыФайлов.ЭтоФайлОписанияФормыКонфигуратора(Файл) Тогда
		ВызватьИсключение СтрШаблон("Файл '%1' не является файлом формы.", Файл.ПолноеИмя);
	КонецЕсли;

	ДанныеФормы = Новый Массив;
	ДанныеБазовойФормы = Новый Массив;
	ФормаИзменена = Ложь;

	Если ФорматEDT Тогда
		ПрочитатьДанныеФормыВФорматеEDT(Файл);
	Иначе
		ПрочитатьДанныеФормыВФорматеКонфигуратора(Файл);
	КонецЕсли;

	ЭлементыБазовойФормы = ТаблицаЭлементовФормы(ДанныеБазовойФормы);
	Если НЕ ФорматEDT Тогда
		СкорректироватьПутьКЭлементам(ЭлементыБазовойФормы);
	КонецЕсли;
	ЭлементыФормы = ТаблицаЭлементовФормы(ДанныеФормы);
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Позволяет определить, является ли обрабатываемая форма формой расширения.
//
// Возвращаемое значение:
//	Булево - признак, является является ли обрабатываемая форма формой расширения, проверка происходит
//		по наличию данных базовой формы.
//
Функция ЭтоФормаРасширения() Экспорт
	Возврат ДанныеБазовойФормы <> Неопределено И ДанныеБазовойФормы.Количество() > 0;
КонецФункции

// Проверяет, существуют ли дубли среди идентификаторов объектов формы.
//
// Возвращаемое значение:
//	Булево - признак наличия дублей.
//
Функция ЕстьДублиИдентификаторов() Экспорт
	Возврат ТаблицаДублей().Количество() > 0 И ТаблицаДублей(0).Количество > 1;
КонецФункции

// Определяет, были ли внесены изменения в текст формы.
//
// Возвращаемое значение:
//	Булево - признак наличия изменений в тексте формы.
//
Функция ФормаИзменена() Экспорт
	Возврат ФормаИзменена;
КонецФункции

// При наличии у формы базовой формы, заменяет идентификаторы всех заимствованных объектов на идентификаторы
//	базовой формы. Поиск заимствованных объектов выполняется по полному пути и имени объекта.
//
Процедура ВосстановитьСвязьЭлементовСБазовойФормой() Экспорт
	Для Каждого СтрокаЭлемента Из ЭлементыБазовойФормы Цикл
		НайденныеСтроки = ЭлементыФормы.НайтиСтроки(Новый Структура("Путь, Элемент", СтрокаЭлемента.Путь, СтрокаЭлемента.Элемент));
		Если НайденныеСтроки.Количество() > 1 Тогда
			ВызватьИсключение СтрШаблон("На форме найдено более одного экземпляра реквизита: %1", СтрокаЭлемента.Путь);
		ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		Иначе
			НайденнаяСтрока = НайденныеСтроки[0];
			ФормаИзменена = ФормаИзменена ИЛИ (НайденнаяСтрока.НовыйИдентификатор <> СтрокаЭлемента.Идентификатор);

			НайденнаяСтрока.НовыйИдентификатор = СтрокаЭлемента.Идентификатор;
			НайденнаяСтрока.Заимствован = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Для каждого найденного в форме дубля идентификатора выполняет его замену на свободный идентификатор.
//
Процедура ЗаменитьДублиИдентификаторов() Экспорт
	Для Каждого СтрокаДубля Из ТаблицаДублей() Цикл
		Если СтрокаДубля.Количество = 1 Тогда
			Прервать;
		КонецЕсли;

		НайденныеСтроки = ЭлементыФормы.НайтиСтроки(Новый Структура("НовыйИдентификатор", СтрокаДубля.НовыйИдентификатор));
		ЕстьЗаимствованныйЭлемент = Ложь;
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			Если НЕ СтрокаТЧ.Заимствован Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьЗаимствованныйЭлемент = Истина;
			Прервать;
		КонецЦикла;

		Если ЕстьЗаимствованныйЭлемент Тогда
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				Если СтрокаТЧ.Заимствован Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЧ.НовыйИдентификатор = СвободныйИдентификатор();
				ФормаИзменена = Истина;
			КонецЦикла;
		Иначе
			Для Индекс = 0 По НайденныеСтроки.ВГраница() - 1 Цикл
				СтрокаТЧ = НайденныеСтроки[Индекс];
				СтрокаТЧ.НовыйИдентификатор = СвободныйИдентификатор();
				ФормаИзменена = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выполняет запись данных формы в файл.
//
// Параметры:
//	Файл - Файл - объект файла, содержащий полное имя файла, в который должна быть произведена запись.
//
Процедура Записать(Файл) Экспорт
	Кодировка = ФайловыеОперации.ОпределитьКодировку(Файл.ПолноеИмя);
	ЗаписьТекста = Новый ЗаписьТекста(Файл.ПолноеИмя, Кодировка);

	Для Каждого СтрокаТЧ Из ЭлементыФормы Цикл
		Если СтрокаТЧ.Идентификатор = СтрокаТЧ.НовыйИдентификатор Тогда
			Продолжить;
		КонецЕсли;

		Шаблон = ?(ФорматEDT, "<id>%1</id>", "id=""%1""");
		ИсходнаяСтрока = СтрШаблон(Шаблон, СтрокаТЧ.Идентификатор);
		СтрокаЗамены = СтрШаблон(Шаблон, СтрокаТЧ.НовыйИдентификатор);

		ДанныеФормы[СтрокаТЧ.НомерСтроки] = СтрЗаменить(ДанныеФормы[СтрокаТЧ.НомерСтроки], ИсходнаяСтрока, СтрокаЗамены);
	КонецЦикла;

	ШаблонЗаменыБазовойФормы = ШаблонЗаменыБазовойФормы();
	Для Каждого СтрокаФормы Из ДанныеФормы Цикл
		Если НЕ ФорматEDT И СтрНайти(СтрокаФормы, ШаблонЗаменыБазовойФормы) > 0 Тогда
			Для Каждого СтрокаБазовойФормы Из ДанныеБазовойФормы Цикл
				ЗаписьТекста.ЗаписатьСтроку(СтрокаБазовойФормы);
			КонецЦикла;
		Иначе
			ЗаписьТекста.ЗаписатьСтроку(СтрокаФормы);
		КонецЕсли;
	КонецЦикла;

	ЗаписьТекста.Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьДанныеФормыВФорматеКонфигуратора(Файл)
	Кодировка = ФайловыеОперации.ОпределитьКодировку(Файл.ПолноеИмя);
	ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, Кодировка);
	
	ЧтениеБлокаБазовойФормы = Ложь;
	ИмяБлокаБазовойФормы = ИмяБлокаБазовойФормы();
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		Если СтрНайти(Стр, ИмяБлокаБазовойФормы) > 0 Тогда
			Если ЧтениеБлокаБазовойФормы Тогда
				// Завершение чтения блока
				ЧтениеБлокаБазовойФормы = Ложь;
				ДанныеФормы.Добавить(ШаблонЗаменыБазовойФормы());
			Иначе
				// Начало чтения блока
				ЧтениеБлокаБазовойФормы = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЧтениеБлокаБазовойФормы Тогда
			ДанныеБазовойФормы.Добавить(Стр);
		Иначе
			ДанныеФормы.Добавить(Стр);
		КонецЕсли;

		Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;

	ЧтениеТекста.Закрыть();
КонецПроцедуры

Процедура ПрочитатьДанныеФормыВФорматеEDT(Файл)
	БазоваяФорма = Новый Файл(ОбъединитьПути(Файл.Путь, ТипыФайлов.ПутьКФайлуБазовойФормы()));
	Если БазоваяФорма.Существует() Тогда
		ДанныеБазовойФормы = СтрокиФайлаВФорматеEDT(БазоваяФорма);
	КонецЕсли;

	ДанныеФормы = СтрокиФайлаВФорматеEDT(Файл);
КонецПроцедуры

Функция СтрокиФайлаВФорматеEDT(Файл)
	Кодировка = ФайловыеОперации.ОпределитьКодировку(Файл.ПолноеИмя);
	ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, Кодировка);
	СодержимоеФайла = Новый Массив;
	
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		СодержимоеФайла.Добавить(Стр);
		Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;

	ЧтениеТекста.Закрыть();

	Возврат СодержимоеФайла;
КонецФункции

Функция ТаблицаЭлементовФормы(МассивСтрок)
	ТаблицаЭлементов = НоваяТаблицаЭлементов();
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат ТаблицаЭлементов;
	КонецЕсли;

	ЧтениеДанных = Новый ЧтениеДанныхФормы(МассивСтрок);
	Если ФорматEDT Тогда
		ИмяЭлемента = "";
		Пока ЧтениеДанных.Прочитать() Цикл
			Если ЧтениеДанных.Имя = "name" Тогда
				ИмяЭлемента = ЧтениеДанных.Значение;
			КонецЕсли;
			Если ЧтениеДанных.Имя = "id" И ИмяЭлемента <> "" Тогда
				Идентификатор = Число(ЧтениеДанных.Значение);
				ДобавитьЭлемент(ТаблицаЭлементов, ЧтениеДанных.Путь(), ИмяЭлемента, Идентификатор, ЧтениеДанных.НомерСтроки());
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ЧтениеДанных.Прочитать() Цикл
			Идентификатор = ЧтениеДанных.ИдентификаторЭлемента();
			ИмяЭлемента = ЧтениеДанных.ИмяЭлемента();
			Если Идентификатор <> Неопределено И ИмяЭлемента <> Неопределено Тогда
				Идентификатор = Число(Идентификатор);
				ДобавитьЭлемент(ТаблицаЭлементов, ЧтениеДанных.Путь(), ИмяЭлемента, Идентификатор, ЧтениеДанных.НомерСтроки());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТаблицаЭлементов.Индексы.Добавить("Путь, Элемент");
	ТаблицаЭлементов.Индексы.Добавить("НовыйИдентификатор");

	Возврат ТаблицаЭлементов;
КонецФункции

Функция НоваяТаблицаЭлементов()
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Путь");
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Идентификатор");
	ТаблицаЭлементов.Колонки.Добавить("НовыйИдентификатор");
	ТаблицаЭлементов.Колонки.Добавить("НомерСтроки");
	ТаблицаЭлементов.Колонки.Добавить("Количество");
	ТаблицаЭлементов.Колонки.Добавить("Заимствован");

	Возврат ТаблицаЭлементов;
КонецФункции

Процедура ДобавитьЭлемент(ТаблицаЭлементов, Путь, Элемент, Идентификатор, НомерСтроки)
	Если НЕ ЗначениеЗаполнено(Элемент) ИЛИ НомерСтроки < 0 Тогда
		Возврат;
	КонецЕсли;

	НоваяСтрока = ТаблицаЭлементов.Добавить();
	НоваяСтрока.Путь = Путь;
	НоваяСтрока.Элемент = Элемент;
	НоваяСтрока.Идентификатор = Идентификатор;
	НоваяСтрока.НовыйИдентификатор = Идентификатор;
	НоваяСтрока.НомерСтроки = НомерСтроки;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Заимствован = Ложь;
КонецПроцедуры

Процедура ЗаполнитьСвободныеИдентификаторы(ТаблицаИдентификаторов)
	СвободныеИдентификаторы = Новый Массив;
	ВсегоИдентификаторов = ТаблицаИдентификаторов.Итог("Количество");
	Если НЕ ЗначениеЗаполнено(ВсегоИдентификаторов) Тогда
		ПоследнийИдентификатор = 0;
		Возврат;
	КонецЕсли;
	
	ПоследнийИдентификатор = ТаблицаИдентификаторов[ТаблицаИдентификаторов.Количество() - 1].НовыйИдентификатор;
	ПредыдущийИдентификатор = 0;
	Для Каждого СтрокаТЧ Из ТаблицаИдентификаторов Цикл
		ТекущийИдентификатор = Число(СтрокаТЧ.НовыйИдентификатор);
		Если ТекущийИдентификатор < ПредыдущийИдентификатор Тогда
			Продолжить;
		КонецЕсли;

		Для Идентификатор = ПредыдущийИдентификатор + 1 По ТекущийИдентификатор - 1 Цикл
			СвободныеИдентификаторы.Добавить(Идентификатор);
			Если СвободныеИдентификаторы.Количество() >= ВсегоИдентификаторов Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПредыдущийИдентификатор = ТекущийИдентификатор;
	КонецЦикла;
КонецПроцедуры

Процедура СкорректироватьПутьКЭлементам(ТаблицаЭлементов)
	ИмяБлокаБазовойФормы = ИмяБлокаБазовойФормы();
	Для Каждого СтрокаТЧ Из ТаблицаЭлементов Цикл
		СтрокаТЧ.Путь = СтрЗаменить(СтрокаТЧ.Путь, ИмяБлокаБазовойФормы, "Form");
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуДублей()
	ТаблицаДублей = ЭлементыФормы.Скопировать();
	
	ТаблицаДублей.Сортировать("НовыйИдентификатор");
	ЗаполнитьСвободныеИдентификаторы(ТаблицаДублей);
	
	ТаблицаДублей.Свернуть("НовыйИдентификатор", "Количество");
	ТаблицаДублей.Сортировать("Количество УБЫВ");
КонецПроцедуры

Функция ТаблицаДублей(НомерСтроки = Неопределено)
	Если ТаблицаДублей = Неопределено Тогда
		ЗаполнитьТаблицуДублей();
	КонецЕсли;
	
	ПолучитьТолькоСтроку = (ТипЗнч(НомерСтроки) = Тип("Число") И НомерСтроки >= 0 И НомерСтроки <= ТаблицаДублей.Количество() - 1);

	Возврат ?(ПолучитьТолькоСтроку, ТаблицаДублей[НомерСтроки], ТаблицаДублей);
КонецФункции

Функция СвободныйИдентификатор()
	Если СвободныеИдентификаторы.Количество() > 0 Тогда
		СвободныйИдентификатор = СвободныеИдентификаторы[0];
		СвободныеИдентификаторы.Удалить(0);
		Возврат СвободныйИдентификатор;
	Иначе
		ПоследнийИдентификатор = ПоследнийИдентификатор + 1;
		Возврат ПоследнийИдентификатор;
	КонецЕсли;
КонецФункции

Функция ШаблонЗаменыБазовойФормы()
	Возврат "<!-- ДАННЫЕ БАЗОВОЙ ФОРМЫ -->";
КонецФункции

Функция ИмяБлокаБазовойФормы()
	Возврат "BaseForm";
КонецФункции

#КонецОбласти
